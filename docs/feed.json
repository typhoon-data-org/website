[


  
    
    {
      "title": "How to create a Serverless Telegram Bot to send daily jokes to your friends",
      "permalink": "http://0.0.0.0:4321/serverless-telegram-bot-jokes.html",
      "link": "http://0.0.0.0:4321/serverless-telegram-bot-jokes.html",
      "date": "2022-05-31T00:00:00-07:00",
      
        "modified": "2022-07-04T12:54:00-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<h4 id=\"table-of-contents\">Table of contents</h4>\n<ul id=\"markdown-toc\">\n  <li><a href=\"#table-of-contents\" id=\"markdown-toc-table-of-contents\">Table of contents</a></li>\n  <li><a href=\"#summary\" id=\"markdown-toc-summary\">Summary</a></li>\n  <li><a href=\"#getting-started\" id=\"markdown-toc-getting-started\">Getting started</a></li>\n  <li><a href=\"#tell-me-a-joke\" id=\"markdown-toc-tell-me-a-joke\">Tell me a joke!</a></li>\n  <li><a href=\"#i-want-the-joke-on-telegram\" id=\"markdown-toc-i-want-the-joke-on-telegram\">I want the joke on telegram</a></li>\n  <li><a href=\"#aiming-for-the-clouds\" id=\"markdown-toc-aiming-for-the-clouds\">Aiming for the clouds</a>    <ul>\n      <li><a href=\"#build-and-upload-the-workflow\" id=\"markdown-toc-build-and-upload-the-workflow\">Build and upload the workflow</a></li>\n      <li><a href=\"#deploying-infrastructure\" id=\"markdown-toc-deploying-infrastructure\">Deploying infrastructure</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#lets-take-it-for-a-spin\" id=\"markdown-toc-lets-take-it-for-a-spin\">Let’s take it for a spin</a></li>\n  <li><a href=\"#why-cant-i-just-run-everything-in-one-lambda\" id=\"markdown-toc-why-cant-i-just-run-everything-in-one-lambda\">Why can’t I just run everything in one lambda?</a></li>\n  <li><a href=\"#this-is-good-to-be-true-can-i-really-build-all-my-etls-like-this\" id=\"markdown-toc-this-is-good-to-be-true-can-i-really-build-all-my-etls-like-this\">This is good to be true, can I really build all my ETLs like this?</a></li>\n  <li><a href=\"#does-that-mean-that-typhoon-is-not-ready-for-prime-time\" id=\"markdown-toc-does-that-mean-that-typhoon-is-not-ready-for-prime-time\">Does that mean that Typhoon is not ready for prime time?</a></li>\n  <li><a href=\"#cleaning-up\" id=\"markdown-toc-cleaning-up\">Cleaning up</a></li>\n  <li><a href=\"#thanks-for-following-along\" id=\"markdown-toc-thanks-for-following-along\">Thanks for following along!</a></li>\n</ul>\n\n<h4 id=\"summary\">Summary</h4>\n\n<p><a href=\"https://github.com/typhoon-data-org/typhoon-orchestrator\">Typhoon Orchestrator</a> is a great way to deploy ETL workflow on AWS Lambda. In this tutorial we intend to show how easy to use and versatile it is by deploying code to Lambda that gets a random joke from <a href=\"https://jokeapi.dev\">https://jokeapi.dev</a> once a day and sends it to your telegram group.</p>\n\n<h2 id=\"getting-started\">Getting started</h2>\n\n<p>The first thing you need to do is install typhoon and the rest of the dependencies needed for this tutorial, preferrably in a virtual environment.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>pip <span class=\"nb\">install </span>typhoon-orchestrator[dev]\npip <span class=\"nb\">install </span>python-telegram-bot\npip <span class=\"nb\">install </span>requests\n</code></pre></div></div>\n\n<p>Next we create our project, we will call our project jester (we could call it anything).</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>typhoon init jester <span class=\"nt\">--template</span> minimal\n<span class=\"nb\">cd </span>jester\ntyphoon status\n</code></pre></div></div>\n\n<p>Notice that the status command gives us the following warning: <code class=\"language-plaintext highlighter-rouge\">Connections YAML not found. To add connections create connections.yml</code>. This is normal because typhoon normally uses a metadata database where you can store connections and variables, but we don’t want to create and use any DynamoDB tables for this tutorial so we used the minimal template that doesn’t include anything related to the metadata database. If you see any warnings about the metadata database during the course of the tutorial don’t worry, it’s for the same reason.</p>\n\n<h2 id=\"tell-me-a-joke\">Tell me a joke!</h2>\n\n<p>Before we worry about telegram, let’s create a workflow that calls the joke API and prints the joke on your CLI. Create the file: <code class=\"language-plaintext highlighter-rouge\">dags/send_me_a_joke.yml</code>:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">send_me_a_joke</span>\n<span class=\"na\">schedule_interval</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">@daily'</span>\n\n<span class=\"na\">tasks</span><span class=\"pi\">:</span>\n  <span class=\"na\">get_joke</span><span class=\"pi\">:</span>\n    <span class=\"na\">function</span><span class=\"pi\">:</span> <span class=\"s\">typhoon.http.get_raw</span>\n    <span class=\"na\">args</span><span class=\"pi\">:</span>\n      <span class=\"na\">url</span><span class=\"pi\">:</span> <span class=\"s\">https://v2.jokeapi.dev/joke/Programming?blacklistFlags=nsfw,religious,political,racist,sexist,explicit&amp;type=single</span>\n  \n  <span class=\"na\">select_joke_text</span><span class=\"pi\">:</span>\n    <span class=\"na\">input</span><span class=\"pi\">:</span> <span class=\"s\">get_joke</span>\n    <span class=\"na\">function</span><span class=\"pi\">:</span> <span class=\"s\">typhoon.json.search</span>\n    <span class=\"na\">args</span><span class=\"pi\">:</span>\n      <span class=\"na\">data</span><span class=\"pi\">:</span> <span class=\"kt\">!Py</span> <span class=\"s\">$BATCH.response.json()</span>\n      <span class=\"na\">expression</span><span class=\"pi\">:</span> <span class=\"s\">joke</span>\n\n  <span class=\"na\">tell_joke</span><span class=\"pi\">:</span>\n    <span class=\"na\">input</span><span class=\"pi\">:</span> <span class=\"s\">select_joke_text</span>\n    <span class=\"na\">function</span><span class=\"pi\">:</span> <span class=\"s\">typhoon.debug.echo</span>\n    <span class=\"na\">args</span><span class=\"pi\">:</span>\n      <span class=\"na\">joke</span><span class=\"pi\">:</span> <span class=\"kt\">!Py</span> <span class=\"s\">$BATCH</span>\n</code></pre></div></div>\n\n<p>This workflow has three tasks using built-in functions:</p>\n\n<ul>\n  <li>\n    <p><strong>get_joke</strong>: Calls the joke API and gets a response like to the following:</p>\n\n    <div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\">\n      </span><span class=\"nl\">\"error\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"category\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Programming\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"type\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"single\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"joke\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"A man is smoking a cigarette and blowing smoke rings into the air. His girlfriend becomes irritated with the smoke and says </span><span class=\"se\">\\\"</span><span class=\"s2\">Can't you see the warning on the cigarette pack? Smoking is hazardous to your health!</span><span class=\"se\">\\\"</span><span class=\"s2\"> to which the man replies, </span><span class=\"se\">\\\"</span><span class=\"s2\">I am a programmer.  We don't worry about warnings; we only worry about errors.</span><span class=\"se\">\\\"</span><span class=\"s2\">\"</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"flags\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n          </span><span class=\"nl\">\"nsfw\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n          </span><span class=\"nl\">\"religious\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n          </span><span class=\"nl\">\"political\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n          </span><span class=\"nl\">\"racist\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n          </span><span class=\"nl\">\"sexist\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\">\n          </span><span class=\"nl\">\"explicit\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\">\n      </span><span class=\"p\">},</span><span class=\"w\">\n      </span><span class=\"nl\">\"id\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">38</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"safe\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">,</span><span class=\"w\">\n      </span><span class=\"nl\">\"lang\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s2\">\"en\"</span><span class=\"w\">\n  </span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div>    </div>\n  </li>\n  <li><strong>select_joke_text</strong>: Uses a <a href=\"https://jmespath.org/\">JMESPath</a> expression to select data from the JSON text.</li>\n  <li><strong>tell_joke</strong>: Prints the joke text.</li>\n</ul>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">!Py</code> tag means that instead of passing it a YAML object, you are passing it a string representing python code to run. For example, <code class=\"language-plaintext highlighter-rouge\">foo: 4</code> is equivalent to <code class=\"language-plaintext highlighter-rouge\">foo: !Py 2+2</code>.  <code class=\"language-plaintext highlighter-rouge\">$BATCH</code> is a special variable that holds whatever the previous function returned or yielded. In the case of the <code class=\"language-plaintext highlighter-rouge\">select_joke_test</code> task where the input is the <code class=\"language-plaintext highlighter-rouge\">get_joke</code> task, its function returned a NamedTuple with a response and some metadata, so that <code class=\"language-plaintext highlighter-rouge\">$BATCH.response</code>is a requests.Response object.</p>\n\n<p>Lets run to see a joke in our terminal</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>typhoon dag run <span class=\"nt\">--dag-name</span> send_me_a_joke\n</code></pre></div></div>\n\n<p>Piece of cake! But here comes the interesting part…</p>\n\n<h2 id=\"i-want-the-joke-on-telegram\">I want the joke on telegram</h2>\n\n<p>There is no built-in function in Typhoon to send a text to a telegram chat. Fortunately it’s very easy to extend Typhoon, so let’s make it ourselves.</p>\n\n<p>Create the following file <code class=\"language-plaintext highlighter-rouge\">functions/msg.py</code>:</p>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kn\">import</span> <span class=\"nn\">telegram</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">send_message_telegram</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">chat_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"s\">\"\"\"Given a telegram bot token, chat_id and message,\n       send the message to that chat\"\"\"</span>\n    <span class=\"n\">bot</span> <span class=\"o\">=</span> <span class=\"n\">telegram</span><span class=\"p\">.</span><span class=\"n\">Bot</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s\">'Sending message </span><span class=\"si\">{</span><span class=\"n\">message</span><span class=\"si\">}</span><span class=\"s\"> to </span><span class=\"si\">{</span><span class=\"n\">chat_id</span><span class=\"si\">}</span><span class=\"s\">'</span><span class=\"p\">)</span>\n    <span class=\"n\">bot</span><span class=\"p\">.</span><span class=\"n\">send_message</span><span class=\"p\">(</span><span class=\"n\">chat_id</span><span class=\"o\">=</span><span class=\"n\">chat_id</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">message</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">message</span>\n</code></pre></div></div>\n\n<p>And update the DAG file we created before at <code class=\"language-plaintext highlighter-rouge\">dags/send_me_a_joke.yml</code>:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">send_me_a_joke</span>\n<span class=\"na\">schedule_interval</span><span class=\"pi\">:</span> <span class=\"s\">0 10 * * *</span>  <span class=\"c1\"># Send the joke at 10am every day</span>\n\n<span class=\"na\">tasks</span><span class=\"pi\">:</span>\n  <span class=\"na\">get_joke</span><span class=\"pi\">:</span>\n    <span class=\"na\">function</span><span class=\"pi\">:</span> <span class=\"s\">typhoon.http.get_raw</span>\n    <span class=\"na\">args</span><span class=\"pi\">:</span>\n      <span class=\"na\">url</span><span class=\"pi\">:</span> <span class=\"s\">https://v2.jokeapi.dev/joke/Programming?blacklistFlags=nsfw,religious,political,racist,sexist,explicit&amp;type=single</span>\n  \n  <span class=\"na\">select_joke_text</span><span class=\"pi\">:</span>\n    <span class=\"na\">input</span><span class=\"pi\">:</span> <span class=\"s\">get_joke</span>\n    <span class=\"na\">function</span><span class=\"pi\">:</span> <span class=\"s\">typhoon.json.search</span>\n    <span class=\"na\">args</span><span class=\"pi\">:</span>\n      <span class=\"na\">data</span><span class=\"pi\">:</span> <span class=\"kt\">!Py</span> <span class=\"s\">$BATCH.response.json()</span>\n      <span class=\"na\">expression</span><span class=\"pi\">:</span> <span class=\"s\">joke</span>\n\n  <span class=\"na\">tell_joke</span><span class=\"pi\">:</span>\n    <span class=\"na\">input</span><span class=\"pi\">:</span> <span class=\"s\">select_joke_text</span>\n    <span class=\"na\">function</span><span class=\"pi\">:</span> <span class=\"s\">functions.msg.send_message_telegram</span>\n    <span class=\"na\">args</span><span class=\"pi\">:</span>\n      <span class=\"na\">message</span><span class=\"pi\">:</span> <span class=\"kt\">!Py</span> <span class=\"s\">$BATCH</span>\n      <span class=\"na\">token</span><span class=\"pi\">:</span> <span class=\"kt\">!Var</span> <span class=\"s\">telegram_token</span>\n      <span class=\"na\">chat_id</span><span class=\"pi\">:</span> <span class=\"kt\">!Var</span> <span class=\"s\">chat_id</span>\n\n<span class=\"na\">requirements</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">python-telegram-bot</span>\n  <span class=\"pi\">-</span> <span class=\"s\">requests</span>\n</code></pre></div></div>\n\n<p>Notice that for the token and chat id we have the <code class=\"language-plaintext highlighter-rouge\">!Var</code> tag. This is because we don’t want to include a secret like a token in the code, so we will read it from a variable. If you are really perceptive you may be thinking: “Didn’t you say that we are using a minimal deployment where there is no metadata database to store variables on?” Yes, that’s 100% correct. Usually we would store variables in the metadata database. However, we will use the alternate method of storing variables which is using an environment variable that starts with <code class=\"language-plaintext highlighter-rouge\">TYPHOON_VARIABLE_</code>.</p>\n\n<ul>\n  <li>To create a bot with the botfather and <strong>get a token</strong> follow the official tutorial <a href=\"https://core.telegram.org/bots#creating-a-new-bot\">https://core.telegram.org/bots#creating-a-new-bot</a></li>\n  <li>To <strong>find out your chat ID</strong> check out <a href=\"https://stackoverflow.com/questions/32423837/telegram-bot-how-to-get-a-group-chat-id\">https://stackoverflow.com/questions/32423837/telegram-bot-how-to-get-a-group-chat-id</a>. Keep in mind that <strong>you can only add the bot to group chats, not private conversations</strong>.</li>\n</ul>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span><span class=\"nv\">TYPHOON_VARIABLE_telegram_token</span><span class=\"o\">=</span><span class=\"s2\">\"MY_SECRET_TELEGRAM_TOKEN\"</span>\n<span class=\"nb\">export </span><span class=\"nv\">TYPHOON_VARIABLE_chat_id</span><span class=\"o\">=</span><span class=\"s2\">\"128332492187641\"</span>\n</code></pre></div></div>\n\n<p>Now that we have everything ready, let’s send some jokes.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>typhoon dag run <span class=\"nt\">--dag-name</span> send_me_a_joke\n</code></pre></div></div>\n\n<p>If everything was correctly set up you should get the notification with a random programmer joke!</p>\n\n<h2 id=\"aiming-for-the-clouds\">Aiming for the clouds</h2>\n\n<h3 id=\"build-and-upload-the-workflow\">Build and upload the workflow</h3>\n\n<p>This is all well and good, but we want the bot to tell us a joke every day without needing to run the code locally. First of all let’s compile our code into a zip and upload it to S3 so that Lambda can use it. This can be a little tedious, but luckily Typhoon takes care of that for us. We need to tell it to which S3 bucket we want to deploy to. <strong>You will also need a configured <a href=\"https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html#cli-configure-profiles-create\">AWS profile</a></strong>. Open the <code class=\"language-plaintext highlighter-rouge\">.typhoonremotes</code> file and modify it to use your profile and S3 bucket.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>[test]\naws-profile=myaws\ns3-bucket=typhoon-orchestrator\n</code></pre></div></div>\n\n<p>Now that we have a remote called <code class=\"language-plaintext highlighter-rouge\">test</code> we are ready to create the zip files and push them to S3. You will need to have docker installed for this step because the dependencies need to be built in an OS that is compatible with the one Lambda is using, otherwise they won’t work. This is a very common source of problems that Typhoon helps you avoid. If you are sure that your OS is compatible you can add the flag <code class=\"language-plaintext highlighter-rouge\">--build-deps-locally</code>, but <strong>it is generally not recomended</strong>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>typhoon dag push --dag-name send_me_a_joke test\n</code></pre></div></div>\n\n<p>This will have taken a very long time because Typhoon built all of the dependencies, but don’t worry <strong>updating the workflow code is much much faster since the dependencies are separated into a layer and don’t need to be re-deployed unless they change</strong>.</p>\n\n<p>The <code class=\"language-plaintext highlighter-rouge\">test</code> at the end tells it what remote to deploy to. In the future we could add a different production environment with its own remote.</p>\n\n<p>If you check your S3 bucket now you’ll find two files:</p>\n\n<ul>\n  <li><strong>The lambda code:</strong> <code class=\"language-plaintext highlighter-rouge\">typhoon_dag_builds/send_me_a_joke/lambda.zip</code></li>\n  <li><strong>All the necessary dependencies</strong>: <code class=\"language-plaintext highlighter-rouge\">typhoon_dag_builds/send_me_a_joke/layer.zip</code></li>\n</ul>\n\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/gfjtgfcfs5q19ay8jvrp.png\" alt=\"S3 objects\" /></p>\n\n<h3 id=\"deploying-infrastructure\">Deploying infrastructure</h3>\n\n<p>For this part you will need to <a href=\"https://learn.hashicorp.com/tutorials/terraform/install-cli\">install and set up terraform</a>. Learn more about infrastructure as code <a href=\"https://learn.hashicorp.com/tutorials/terraform/infrastructure-as-code?in=terraform/aws-get-started\">here</a>.</p>\n\n<p><strong>Typhoon automatically creates some terraform files that describe all the necessary infrastructure</strong> to create in order to deploy our workflow to AWS Lambda. This greatly simplifies the creation of all the necessary resources that you would otherwise need to create manually. More importantly, it provides you a starting point while also giving you full control to change the terraform files until you have the desired configuration.</p>\n\n<p>For this tutorial you just need to <strong>update the test variables file to include the S3 bucket name and some DAG info</strong>. We can get the info for all the dags by running <code class=\"language-plaintext highlighter-rouge\">typhoon dag info --json-output --indent 2</code>, but in this case we will need to adapt it to include the necessary environment variables. This means that you will need to add the following to the file <code class=\"language-plaintext highlighter-rouge\">terraform/test.tfvars</code>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>dag_info = {\n    \"send_me_a_joke\": {\n        \"schedule_interval\": \"cron(0 10 * * ? *)\",\n        \"environment\": {\n            \"TYPHOON_VARIABLE_telegram_token\": \"MY_SECRET_TELEGRAM_TOKEN\",\n            \"TYPHOON_VARIABLE_chat_id\": \"128332492187641\"\n        }\n    }\n}\n</code></pre></div></div>\n\n<p>Notice how the schedule interval is in a different format than the one we defined. This is because Terraform maps to AWS resources, and AWS uses its own flavor of cron expressions which is incompatible with the standard Unix cron expressions used by tools like cron, crontab, Airflow and many more. Typhoon aims to be a framework that can deploy to many platforms (currently supports AWS Lambda and Airflow) so we decided to follow the industry standard instead of AWS’s. Luckily, when we run <code class=\"language-plaintext highlighter-rouge\">typhoon dag info ...</code> <strong>Typhoon converts it to AWS’s standard so you don’t need to do that yourself!</strong></p>\n\n<p>Now we are ready to create the infrastructure with terraform.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nb\">export </span><span class=\"nv\">AWS_PROFILE</span><span class=\"o\">=</span>my-aws-profile\n<span class=\"nb\">export </span><span class=\"nv\">AWS_DEFAULT_REGION</span><span class=\"o\">=</span>eu-west-1\n<span class=\"nb\">cd </span>terraform\nterraform init\nterraform plan <span class=\"nt\">-var-file</span><span class=\"o\">=</span>test.tfvars <span class=\"nt\">-out</span><span class=\"o\">=</span>tfplan\nterraform apply tfplan\n</code></pre></div></div>\n\n<p>And voila! You can check all of the resources that have been created in AWS and take a moment to appreciate how much time we’ve saved.</p>\n\n<p><img src=\"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/ymarmji5bglvr7axo16r.png\" alt=\"AWS Lambda Function\" /></p>\n\n<h2 id=\"lets-take-it-for-a-spin\">Let’s take it for a spin</h2>\n\n<p>If everything worked correctly you will get a joke in your telegram chat at 10am, but we don’t want to wait that long, we want to hear one now! You could invoke the Lambda from the AWS console, but we will invoke it with Typhoon.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>typhoon dag run <span class=\"nt\">--dag-name</span> send_me_a_joke <span class=\"nb\">test</span>\n</code></pre></div></div>\n\n<p>Hopefully you got a hilarious joke sent right to your group chat.</p>\n\n<p>This is the same command we used earlier to run the workflow locally, but with <code class=\"language-plaintext highlighter-rouge\">test</code>at the end specifying that we want to run it in the remote environment. This has invoked a lambda and shown you the logs. Actually, to be more precise, it has invoked a Lambda that has then invoked another Lambda and then invoked another Lambda. Why? Because Typhoon is asynchronous by default which means that as soon as a function returns or yields a batch we invoke a new Lambda to process it. This is useful because you can have a lot of tasks performing work in parallel. For example, imagine you have a workflow that reads FTP CSV files, zips them up and uploads to S3. The first task could list all the CSV files in the FTP and yields each path as a batch. Then the next task will compress them which can take a long time, but we actually invoked a new Lambda instance for each batch so we are processing them all in parallel!</p>\n\n<p>Notice how even though the workflow ran across three lambdas, you still got the full log in your terminal. Lambdas can be hard to monitor and debug, but Typhoon tries to make this process easier. This is why when you run a Typhoon DAG manually, it waits for a response so that it can print the logs. Every invocation will in turn also wait for the response of any Lambdas it invokes so you will end up with the full log no matter how many Lambda invocations the workflow ran on. It’s extremely useful to be able to see if the DAG is working correctly, but it does introduce synchronicity so the DAG will run slower. We believe it’s a worthwile tradeoff for manual invocations. <strong>Rest assured that when the workflow is triggered on schedule it will run at full speed</strong>.</p>\n\n<h2 id=\"why-cant-i-just-run-everything-in-one-lambda\">Why can’t I just run everything in one lambda?</h2>\n\n<p>Great question, and there’s no reason not to since our worflow is very light and doesn’t benefit from parallelism. You just need to modify the first two tasks to make them synchronous with <code class=\"language-plaintext highlighter-rouge\">asynchronous: False</code>. This is the relevant part of the code:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">tasks</span><span class=\"pi\">:</span>\n  <span class=\"na\">get_joke</span><span class=\"pi\">:</span>\n    <span class=\"na\">function</span><span class=\"pi\">:</span> <span class=\"s\">typhoon.http.get_raw</span>\n    <span class=\"na\">asynchronous</span><span class=\"pi\">:</span> <span class=\"no\">false</span>\n    <span class=\"na\">args</span><span class=\"pi\">:</span>\n      <span class=\"na\">url</span><span class=\"pi\">:</span> <span class=\"s\">https://v2.jokeapi.dev/joke/Programming?blacklistFlags=nsfw,religious,political,racist,sexist,explicit&amp;type=single</span>\n  \n  <span class=\"na\">select_joke_text</span><span class=\"pi\">:</span>\n    <span class=\"na\">input</span><span class=\"pi\">:</span> <span class=\"s\">get_joke</span>\n    <span class=\"na\">function</span><span class=\"pi\">:</span> <span class=\"s\">typhoon.json.search</span>\n    <span class=\"na\">asynchronous</span><span class=\"pi\">:</span> <span class=\"no\">false</span>\n    <span class=\"na\">args</span><span class=\"pi\">:</span>\n      <span class=\"na\">data</span><span class=\"pi\">:</span> <span class=\"kt\">!Py</span> <span class=\"s\">$BATCH.response.json()</span>\n      <span class=\"na\">expression</span><span class=\"pi\">:</span> <span class=\"s\">joke</span>\n</code></pre></div></div>\n\n<p>Lets build and deploy the code, this time without dependencies by using the flag <code class=\"language-plaintext highlighter-rouge\">--code</code>.</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>typhoon dag push <span class=\"nt\">--dag-name</span> send_me_a_joke <span class=\"nb\">test</span> <span class=\"nt\">--code</span>\n</code></pre></div></div>\n\n<p>Wow, that was much faster! You can see that once the workflow has been deployed one time with all the dependencies, <strong>making changes and deploying them is very fast and easy</strong>. Feel free to run the DAG again to check out how only one Lambda will be invoked now.</p>\n\n<h2 id=\"this-is-good-to-be-true-can-i-really-build-all-my-etls-like-this\">This is good to be true, can I really build all my ETLs like this?</h2>\n\n<p>Yes and no… Depending on your use case Lambda can be a good fit, but there are currently some limitations to this approach:</p>\n\n<ul>\n  <li><strong>Lambdas can only run for 15 minutes</strong>. If you have a long running task this will not work for you. In the future <strong>we intend to support Fargate to run heavier tasks</strong> and solve this issue.</li>\n  <li><strong>Can we really do away with the scheduler?</strong> We have shown you a utopian vision of the future of ETLs. It still remains to be seen if we can fully avoid running a scheduler, and we may run into the harsh reality that if you want to be able to implement sensors, rate-limit tasks, etc. we may need a scheduler. Even if that turns out to be true, it would always be opt-in and much simpler than a traditional one.</li>\n</ul>\n\n<h2 id=\"does-that-mean-that-typhoon-is-not-ready-for-prime-time\">Does that mean that Typhoon is not ready for prime time?</h2>\n\n<p><strong>Absolutely not!</strong> We may have a long (albeit exciting) path ahead to realize our vision of a battle tested, fully serverless, asynchronous workflow orchestrator, but AWS is not the only target. <strong>Typhoon supports compilation to native Airflow code</strong>, the most popular orchestrator around today. This feature can bridge the gap between the simplicity of our vision and the complex reality we currently live in as Data Engineers.</p>\n\n<p>Our hope is that you will use Typhoon and fall in love with the simplicity of our vision, and deploy to Airflow if the current state of AWS deployment can’t meet your needs.</p>\n\n<h2 id=\"cleaning-up\">Cleaning up</h2>\n\n<p>If you want to clean up all the resources that were created on this tutorial run the following command:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>terraform plan <span class=\"nt\">-var-file</span><span class=\"o\">=</span>test.tfvars <span class=\"nt\">-out</span><span class=\"o\">=</span>tfplan <span class=\"nt\">-destroy</span>\nterraform apply <span class=\"nt\">-destroy</span> tfplan\n</code></pre></div></div>\n\n<h2 id=\"thanks-for-following-along\">Thanks for following along!</h2>\n\n<p>If you enjoyed this tutorial we hope to see you soon at <a href=\"https://github.com/typhoon-data-org/typhoon-orchestrator\">https://github.com/typhoon-data-org/typhoon-orchestrator</a>. Check out the code, leave a star, open an issue or come say hi on our discord!</p>",
      "excerpt": "Table of contents\n\n  Table of contents",
      "languages": null,
      "categories": ["article"],
      "tags": ["typhoon","serverless","telegram","tutorial","article"]
    }
    
  

  
    ,
    {
      "title": "Upgrading Guide from v1 to v2",
      "permalink": "http://0.0.0.0:4321/upgrading-from-v1-to-v2.html",
      "link": "http://0.0.0.0:4321/upgrading-from-v1-to-v2.html",
      "date": "2018-07-23T00:00:00-07:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>Almace Scaffolding now migrates from Less to Sass, this may make your existing projects non-upgradable, it needs quite a lot of work for you to do the migration if you use a custom theme that it’s powered by Less preprocessor. You have to compare your existing projects to <a href=\"https://github.com/sparanoid/almace-scaffolding/pull/85\">this Pull Request</a> side to side to make sure every change you made are synced correctly.</p>\n\n<p>If you’re a casual blogger only change some color variables for your default theme, Curtana in this situation, that’s good, you can migrate to v2 easier: just run <code class=\"language-plaintext highlighter-rouge\">$ grunt update</code>.</p>\n\n<p>You should also migrate your own styles in <code class=\"language-plaintext highlighter-rouge\">user.less</code> to <code class=\"language-plaintext highlighter-rouge\">_user.scss</code> and <code class=\"language-plaintext highlighter-rouge\">_varaibles.scss</code>. Due to Sass limitation, I don’t have variable hoisting features like native CSS or Less at hand, so I have to create two user-defined stylesheets:</p>\n\n<ul>\n  <li><code class=\"language-plaintext highlighter-rouge\">assets/_scss/_variables.scss</code> - This file should contain only Sass variables defined in theme Curtana. It will be loaded at the topmost of theme stylesheet <code class=\"language-plaintext highlighter-rouge\">app.scss</code>.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">assets/_scss/_user.scss</code> - where users create style customization.</li>\n</ul>\n\n<p>From 2.0.0, Almace Scaffolding still has the ability to use Less with Grunt.js, however, it’s wise to write your theme in Sass for better future compatibility.</p>\n\n<p>If you’d like to stick with the Less version:</p>\n\n<ul>\n  <li>v1.1.11 will be the last version that supports Less.</li>\n  <li>Less version of theme Curtana will be available as <code class=\"language-plaintext highlighter-rouge\">amsf/amsf-curtana-less</code>.</li>\n</ul>",
      "excerpt": "Almace Scaffolding now migrates from Less to Sass, this may make your existing projects non-upgradable, it needs quite a lot of work for you to do the migration if you use a custom theme that it’s powered by Less preprocessor. You have to compare your existing projects to this Pull Request side to side to make sure every change you made are synced correctly.",
      "languages": null,
      "categories": ["news"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "Upgrading Guide: v1.1.0",
      "permalink": "http://0.0.0.0:4321/upgrading-guide-v1.1.0.html",
      "link": "http://0.0.0.0:4321/upgrading-guide-v1.1.0.html",
      "date": "2017-01-07T00:00:00-08:00",
      
        "modified": "2017-01-10T19:17:09-08:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>There’re some significant changes in update v1.1.0, action required after you upgrade Almace Scaffolding.</p>\n\n<p>In your front-matter fields:</p>\n\n<ul>\n  <li>Replace all <code class=\"language-plaintext highlighter-rouge\">svg-headline</code>, <code class=\"language-plaintext highlighter-rouge\">img-headline</code> with <code class=\"language-plaintext highlighter-rouge\">heading-img</code>.</li>\n  <li>Replace all <code class=\"language-plaintext highlighter-rouge\">svg-headline-width</code>, <code class=\"language-plaintext highlighter-rouge\">img-headline-width</code> with <code class=\"language-plaintext highlighter-rouge\">heading-img-width</code>.</li>\n  <li>Remove all <code class=\"language-plaintext highlighter-rouge\">svg-headline-height</code>, <code class=\"language-plaintext highlighter-rouge\">img-headline-height</code> as they’re deprecated and no longer available.</li>\n  <li>Add <code class=\"language-plaintext highlighter-rouge\">heading-img-local: true</code> if images are stored right inside your project.</li>\n</ul>\n\n<p>Check the following front-matter data for post thumbnails:</p>\n\n<ul>\n  <li>Replace all <code class=\"language-plaintext highlighter-rouge\">thumb</code> with <code class=\"language-plaintext highlighter-rouge\">thumbnail</code>.</li>\n  <li>Add <code class=\"language-plaintext highlighter-rouge\">thumb/</code> prefix to your filename, ie. <code class=\"language-plaintext highlighter-rouge\">thumbnail: thumb/my-post.png</code>.</li>\n  <li>Add <code class=\"language-plaintext highlighter-rouge\">thumbnail-local: true</code> if thumbnails are stored right inside your project.</li>\n</ul>",
      "excerpt": "There’re some significant changes in update v1.1.0, action required after you upgrade Almace Scaffolding.",
      "languages": null,
      "categories": ["news"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "Open Graph",
      "permalink": "http://0.0.0.0:4321/open-graph.html",
      "link": "http://0.0.0.0:4321/open-graph.html",
      "date": "2017-01-06T00:00:00-08:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>Theme Curtana has full Open Graph and Twitter Cards support.</p>\n\n<p>It will look for the image in the following order:</p>\n\n<ol>\n  <li>Use <code class=\"language-plaintext highlighter-rouge\">page.thumbnail</code> if defined in your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>.</li>\n  <li>If no specified <code class=\"language-plaintext highlighter-rouge\">page.thumbnail</code> defined, it uses <a href=\"/custom-heading-background.html\">Heading Background Image</a> (aka. <code class=\"language-plaintext highlighter-rouge\">page.heading-bg</code>) if defined in your post front-matter field.</li>\n  <li>If no heading background image found, Curtana will try to grab the first image (wrapped inside <code class=\"language-plaintext highlighter-rouge\">&lt;img&gt;</code>) in your post as your post thumbnail</li>\n  <li>If nothing found, it falls back to <code class=\"language-plaintext highlighter-rouge\">logo.png</code> located at your site root.</li>\n</ol>\n\n<p>You can always use <code class=\"language-plaintext highlighter-rouge\">page.thumb_force_logo</code> in your post’s front-matter field to override the above lookup.</p>\n\n<p>Here’s a preview on Twitter:</p>\n\n<p><img src=\"https://s3.amazonaws.com/sparanoid/open-graph-preview.png\" alt=\"Twitter Cards (Open Graph compatible) Preview\" /></p>",
      "excerpt": "Theme Curtana has full Open Graph and Twitter Cards support.",
      "languages": null,
      "categories": ["note"],
      "tags": ["curtana"]
    }
    
  

  
    ,
    {
      "title": "Jekyll Theme Compatibility",
      "permalink": "http://0.0.0.0:4321/jekyll-theme-compatibility.html",
      "link": "http://0.0.0.0:4321/jekyll-theme-compatibility.html",
      "date": "2016-11-07T00:00:00-08:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>With the recent release of Jekyll, it gets the built-in ability to support <a href=\"https://jekyllrb.com/docs/themes/\">themes</a>, since we’ve already added theme support in 2015, the original config variables <code class=\"language-plaintext highlighter-rouge\">theme</code> would be conflicted with the built-in one.</p>\n\n<p>To solve this issue, I’ve renamed our <code class=\"language-plaintext highlighter-rouge\">theme</code> option to <code class=\"language-plaintext highlighter-rouge\">amsf_theme</code>. And here’s what you need to do to resolve compatibility issues after upgrading to latest Almace Scaffolding:</p>\n\n<ul>\n  <li>Rename your original <code class=\"language-plaintext highlighter-rouge\">theme</code> option in <code class=\"language-plaintext highlighter-rouge\">_amsf.yml</code> to <code class=\"language-plaintext highlighter-rouge\">amsf_theme</code>.</li>\n  <li>Add <code class=\"language-plaintext highlighter-rouge\">amsf_theme_url</code> with your theme Git URL.</li>\n  <li>Replace all <code class=\"language-plaintext highlighter-rouge\">site.theme</code> with <code class=\"language-plaintext highlighter-rouge\">site.amsf_theme</code> in your page templates.</li>\n</ul>",
      "excerpt": "With the recent release of Jekyll, it gets the built-in ability to support themes, since we’ve already added theme support in 2015, the original config variables theme would be conflicted with the built-in one.",
      "languages": null,
      "categories": ["news"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "Introducing Curtana",
      "permalink": "http://0.0.0.0:4321/theme-curtana.html",
      "link": "http://0.0.0.0:4321/theme-curtana.html",
      "date": "2016-06-01T00:00:00-07:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>Curtana is the default theme of <a href=\"https://sparanoid.com/lab/amsf/\">AMSF</a> (Almace Scaffolding).</p>\n\n<h3 id=\"features\">Features</h3>\n\n<ul>\n  <li>A variant of <a href=\"https://sparanoid.com/\">sparanoid.com</a>, looking great on any modern browsers</li>\n  <li>Minimalism design, No jQuery, no <code class=\"language-plaintext highlighter-rouge\">everybody-shake-ur-body.js</code></li>\n  <li>Ideal for the personal blog, portfolio, product blog and Tumblr-like link blog</li>\n  <li>(Maybe) <a href=\"https://github.com/sparanoid/sparanoid.com/commit/9b44b4c0f57c3dd1e828d828a95cc21b992785ce\">the first</a> template that uses <a href=\"https://www.w3.org/TR/css3-values/#viewport-relative-lengths\">viewport relative units</a></li>\n  <li>Handcrafted stylesheets. No Bootstrap or other bloated frameworks are used, unminified CSS &lt; 12 KB</li>\n  <li>Predefined CSS and Sass (SCSS) variables make it easier to change color schemes for posts</li>\n  <li>Dynamic color scheme for code highlighters powered by <a href=\"https://sparanoid.com/lab/randomized/\">Randomized</a></li>\n  <li>Open Graph and Twitter Cards support</li>\n  <li>No Internet Explorer support</li>\n</ul>",
      "excerpt": "Curtana is the default theme of AMSF (Almace Scaffolding).",
      "languages": null,
      "categories": ["note"],
      "tags": ["curtana"]
    }
    
  

  
    ,
    {
      "title": "Deployment Methods",
      "permalink": "http://0.0.0.0:4321/deployment-methods.html",
      "link": "http://0.0.0.0:4321/deployment-methods.html",
      "date": "2016-03-18T00:00:00-07:00",
      
        "modified": "2021-03-12T20:33:14-08:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>Sites generated using Almace Scaffolding can be deployed in nearly any web hosting services. A few of the most common deployment techniques are described below. More deployment methods please refer to <a href=\"https://jekyllrb.com/docs/deployment-methods/\">Jekyll - Deployment methods</a>.</p>\n\n<h2 id=\"cloudflare-pages\">Cloudflare Pages</h2>\n\n<p>The simplest way to deploy your AMSF site is using <a href=\"https://pages.cloudflare.com/\">Cloudflare Pages</a>. Just signup for Cloudflare and connect it with your GitHub account. Create a Pages project and use the following settings:</p>\n\n<ul>\n  <li>Framework preset: Jekyll</li>\n  <li>Build command: <code class=\"language-plaintext highlighter-rouge\">grunt build</code></li>\n  <li>Build output directory: <code class=\"language-plaintext highlighter-rouge\">_site</code></li>\n</ul>\n\n<h2 id=\"web-hosting-providers-ftpsftp\">Web Hosting Providers (FTP/SFTP)</h2>\n\n<p>Just about any traditional web hosting provider will let you upload files to their servers over FTP. You can simply run the <code class=\"language-plaintext highlighter-rouge\">grunt build</code> command and upload all files generated under <code class=\"language-plaintext highlighter-rouge\">_site</code> to the HTTP root folder of your hosting account.</p>\n\n<h2 id=\"rsync\">rsync</h2>\n\n<p>There’s a <code class=\"language-plaintext highlighter-rouge\">_deploy.yml</code> at the root of your AMSF project containing a basic <code class=\"language-plaintext highlighter-rouge\">rsync</code> configurations. Change these configurations to yours and then run:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt deploy:rsync\n</code></pre></div></div>\n\n<p>You can deploy it for specific environments, the following command will deploy your site to <code class=\"language-plaintext highlighter-rouge\">beta</code> environment via <code class=\"language-plaintext highlighter-rouge\">rsync</code> method you defined in <code class=\"language-plaintext highlighter-rouge\">_deploy.yml</code>:</p>\n\n<div class=\"language-bash highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt deploy:rsync <span class=\"nt\">--env</span><span class=\"o\">=</span>beta\n</code></pre></div></div>\n\n<h2 id=\"amazon-s3-s3_website\">Amazon S3 (s3_website)</h2>\n\n<p>You can also deploy your site to Amazon S3 via <a href=\"https://github.com/laurilehmijoki/s3_website\">s3_website</a>, see <code class=\"language-plaintext highlighter-rouge\">s3_website.example.yml</code> for more info.</p>",
      "excerpt": "Sites generated using Almace Scaffolding can be deployed in nearly any web hosting services. A few of the most common deployment techniques are described below. More deployment methods please refer to Jekyll - Deployment methods.",
      "languages": null,
      "categories": ["note"],
      "tags": ["deployment"]
    }
    
  

  
    ,
    {
      "title": "Multiple Themes Support",
      "permalink": "http://0.0.0.0:4321/multiple-themes-support.html",
      "link": "http://0.0.0.0:4321/multiple-themes-support.html",
      "date": "2015-08-18T00:00:00-07:00",
      
        "modified": "2017-01-20T01:00:20-08:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>From version 0.0.31, you can now use multiple themes in Almace Scaffolding. See <a href=\"/themes.html\">Themes</a> for more information.</p>",
      "excerpt": "From version 0.0.31, you can now use multiple themes in Almace Scaffolding. See Themes for more information.",
      "languages": null,
      "categories": ["news"],
      "tags": []
    }
    
  

  
    ,
    {
      "title": "Welcome",
      "permalink": "http://0.0.0.0:4321/welcome.html",
      "link": "http://0.0.0.0:4321/welcome.html",
      "date": "2014-06-13T00:00:00-07:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>AMSF, a.k.a. <strong>Almace Scaffolding</strong>, is a super-fast Jekyll framework fighting against the website obesity. It supports LiveReload, Sass, HTML minification, inlined stylesheets and more.</p>\n\n<p class=\"largetype\">\n  <a href=\"/getting-started.html\">Getting Started →</a>\n</p>\n\n<p>Go to the <a href=\"https://github.com/sparanoid/almace-scaffolding\">GitHub</a> page for downloads, bug reports, and feature requests.</p>\n\n<h2 id=\"features\">Features</h2>\n\n<ul>\n  <li>Theme switching, you can switch themes with just one command</li>\n  <li>A fully configured Jekyll setup with well-defined <a href=\"https://github.com/sparanoid/almace-scaffolding/blob/master/_app/feed-atom.xml\">Atom feed</a> and <a href=\"https://github.com/sparanoid/almace-scaffolding/blob/master/_app/sitemap.xml\">sitemap</a></li>\n  <li><strong>Almace Scaffolding</strong> ships a sleek responsive theme <a href=\"https://github.com/amsf/amsf-curtana\">Curtana</a>, a variant of <a href=\"https://sparanoid.com/\">sparanoid.com</a>, looking great on any modern browsers</li>\n  <li>Every minified page generates only one HTTP request <sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup></li>\n  <li><a href=\"https://github.com/sparanoid/almace-scaffolding/blob/master/_config.example.yml\">Tons of configurable settings</a> for your posts and site customization</li>\n  <li>Service Worker support for lightning-fast experience</li>\n  <li>Built with Grunt.js for easy development</li>\n  <li>Travis support</li>\n</ul>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>Based on the theme you’re using, theme Curtana generates only one HTTP request for production build when your posts don’t have fancy sliders or other external media files. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n  </ol>\n</div>",
      "excerpt": "AMSF, a.k.a. Almace Scaffolding, is a super-fast Jekyll framework fighting against the website obesity. It supports LiveReload, Sass, HTML minification, inlined stylesheets and more.",
      "languages": null,
      "categories": ["note"],
      "tags": ["getting-started"]
    }
    
  

  
    ,
    {
      "title": "Getting Started",
      "permalink": "http://0.0.0.0:4321/getting-started.html",
      "link": "http://0.0.0.0:4321/getting-started.html",
      "date": "2014-06-12T00:00:00-07:00",
      
        "modified": "2021-10-02T09:10:20-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<ul id=\"markdown-toc\">\n  <li><a href=\"#requirements\" id=\"markdown-toc-requirements\">Requirements</a></li>\n  <li><a href=\"#method-run-in-docker\" id=\"markdown-toc-method-run-in-docker\">Method: Run in Docker</a>    <ul>\n      <li><a href=\"#custom-dependencies\" id=\"markdown-toc-custom-dependencies\">Custom Dependencies</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#method-run-locally\" id=\"markdown-toc-method-run-locally\">Method: Run Locally</a>    <ul>\n      <li><a href=\"#upgrading\" id=\"markdown-toc-upgrading\">Upgrading</a></li>\n      <li><a href=\"#using-beta-release\" id=\"markdown-toc-using-beta-release\">Using Beta Release</a></li>\n    </ul>\n  </li>\n  <li><a href=\"#download\" id=\"markdown-toc-download\">Download</a></li>\n  <li><a href=\"#jekyll-migration\" id=\"markdown-toc-jekyll-migration\">Jekyll Migration</a></li>\n</ul>\n\n<h2 id=\"requirements\">Requirements</h2>\n\n<p>Almace Scaffolding has exactly the same requirements as Jekyll. For more info please refer to <a href=\"https://jekyllrb.com/docs/installation/\">Installation - Jekyll</a>.</p>\n\n<h2 id=\"method-run-in-docker\">Method: Run in Docker</h2>\n\n<p>You can simply run Almace Scaffolding in Docker with <code class=\"language-plaintext highlighter-rouge\">compose</code> command. Create your own <code class=\"language-plaintext highlighter-rouge\">docker-compose.yml</code> file with the following content:</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">version</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">3'</span>\n\n<span class=\"na\">x-defaults</span><span class=\"pi\">:</span> <span class=\"nl\">&amp;defaults</span>\n  <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">sparanoid/almace-scaffolding:latest</span>\n  <span class=\"na\">restart</span><span class=\"pi\">:</span> <span class=\"s\">always</span>\n  <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">./_app/_posts/:/app/_app/_posts/</span>\n  <span class=\"na\">ports</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">4321:4321\"</span>\n\n<span class=\"na\">services</span><span class=\"pi\">:</span>\n  <span class=\"na\">amsf</span><span class=\"pi\">:</span>\n    <span class=\"na\">&lt;&lt;</span><span class=\"pi\">:</span> <span class=\"nv\">*defaults</span>\n    <span class=\"na\">command</span><span class=\"pi\">:</span> <span class=\"s\">serve</span>\n</code></pre></div></div>\n\n<p>This is a minimal docker compose configuration with local <code class=\"language-plaintext highlighter-rouge\">_posts</code> volume mounted inside the container. The <a href=\"https://docs.docker.com/compose/compose-file/compose-file-v3/#volumes\">volumes</a> option can be different based on your customization.</p>\n\n<p>Mount custom data, pages, posts to override them inside container:</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">...</span>\n  <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">./_app/_data/:/app/_app/_data/</span>\n    <span class=\"pi\">-</span> <span class=\"s\">./_app/_pages/:/app/_app/_pages/</span>\n    <span class=\"pi\">-</span> <span class=\"s\">./_app/_posts/:/app/_app/_posts/</span>\n</code></pre></div></div>\n\n<p>Override config file:</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">...</span>\n  <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">./_config.yml:/app/_config.yml</span>\n</code></pre></div></div>\n\n<p>Use custom Gruntfile:</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">...</span>\n  <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">./Gruntfile.coffee:/app/Gruntfile.coffee</span>\n</code></pre></div></div>\n\n<p>Use custom AMSF config for custom themes and templates:</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nn\">...</span>\n  <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">./_app/:/app/_app/</span>\n    <span class=\"pi\">-</span> <span class=\"s\">./_site/:/app/_site/</span>\n    <span class=\"pi\">-</span> <span class=\"s\">./_amsf.yml:/app/_amsf.yml</span>\n</code></pre></div></div>\n\n<p>You can see the example repo at <a href=\"https://github.com/amsf/docker-amsf-example\">amsf/docker-amsf-example</a>.</p>\n\n<h3 id=\"custom-dependencies\">Custom Dependencies</h3>\n\n<p>You can load custom dependencies (custom Grunt plugins or Jekyll plugins) in Docker by building your own Docker images. First you need to create a <code class=\"language-plaintext highlighter-rouge\">Dockerfile</code>:</p>\n\n<div class=\"language-dockerfile highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">FROM</span><span class=\"s\"> sparanoid/almace-scaffolding:latest</span>\n\n<span class=\"c\"># Copy custom dependencies configs</span>\n<span class=\"k\">COPY</span><span class=\"s\"> Gemfile* /app/</span>\n<span class=\"k\">COPY</span><span class=\"s\"> package.json /app/package.json</span>\n<span class=\"k\">COPY</span><span class=\"s\"> yarn.lock /app/yarn.lock</span>\n\n<span class=\"c\"># Reinstall project specific dependencies</span>\n<span class=\"k\">RUN </span>bundle <span class=\"nb\">install</span> <span class=\"o\">&amp;&amp;</span> yarn <span class=\"nb\">install</span>\n</code></pre></div></div>\n\n<p>Then build your image with Docker Compose:</p>\n\n<div class=\"language-yml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">version</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">3'</span>\n\n<span class=\"na\">x-defaults</span><span class=\"pi\">:</span> <span class=\"nl\">&amp;defaults</span>\n  <span class=\"na\">build</span><span class=\"pi\">:</span>\n    <span class=\"na\">context</span><span class=\"pi\">:</span> <span class=\"s\">.</span>\n    <span class=\"na\">dockerfile</span><span class=\"pi\">:</span> <span class=\"s\">Dockerfile</span>\n<span class=\"nn\">...</span>\n</code></pre></div></div>\n\n<h2 id=\"method-run-locally\">Method: Run Locally</h2>\n\n<ol>\n  <li><a href=\"https://github.com/sparanoid/almace-scaffolding/fork\">Fork</a> or clone the repo.</li>\n  <li>Install dependencies with Ruby gem <a href=\"https://bundler.io/\"><code class=\"language-plaintext highlighter-rouge\">bundler</code></a> and Node.js package manager <a href=\"https://www.npmjs.org/\"><code class=\"language-plaintext highlighter-rouge\">npm</code></a>.</li>\n  <li>Run <code class=\"language-plaintext highlighter-rouge\">grunt init</code> to initialize your project.</li>\n  <li>Run <code class=\"language-plaintext highlighter-rouge\">grunt serve</code> to fire up a local server.</li>\n  <li>Edit and customize your site.</li>\n  <li>Change Git remote to your own repo.</li>\n  <li>Push and deploy.</li>\n</ol>\n\n<p>So in short for geeks:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>git clone https://github.com/sparanoid/almace-scaffolding my-site\n<span class=\"nv\">$ </span><span class=\"nb\">cd </span>my-site\n<span class=\"nv\">$ </span>bundle <span class=\"nb\">install</span> <span class=\"o\">&amp;&amp;</span> yarn <span class=\"nb\">install</span>\n<span class=\"nv\">$ </span>grunt init\n<span class=\"nv\">$ </span>grunt serve\n<span class=\"c\"># ...editing</span>\n<span class=\"nv\">$ </span>git remote set-url origin https://github.com/sparanoid/my-site.git\n<span class=\"nv\">$ </span>git push <span class=\"nt\">-u</span> origin master\n<span class=\"c\"># ...publishing</span>\n<span class=\"nv\">$ </span>grunt <span class=\"o\">&amp;&amp;</span> grunt deploy:rsync <span class=\"nt\">--env</span><span class=\"o\">=</span>prod\n</code></pre></div></div>\n\n<h3 id=\"upgrading\">Upgrading</h3>\n\n<p>It will be easy if you’re a casual blogger and keep every core and template file untouched. You can use the following command to update Almace Scaffolding core files:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt amsf-update\n</code></pre></div></div>\n\n<p>It checks the latest Almace Scaffolding build from GitHub and updates core files automatically. Please keep in mind that if you changed some of the AMSF core files this action will <strong>override</strong> the changes you made. So it’s recommended to keep your project under version control, you will always be able to compare changes for Almace Scaffolding.</p>\n\n<h3 id=\"using-beta-release\">Using Beta Release</h3>\n\n<p>By default, when you run <code class=\"language-plaintext highlighter-rouge\">amsf-update</code> you will get updated files from <code class=\"language-plaintext highlighter-rouge\">release</code> branch. However, I’m continuously working on Almace Scaffolding, so there may have testing branches you can try and give me feedback if you’re interested. You can check the AMSF GitHub repository for available branches, and it’s very easy to switch:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt amsf-update <span class=\"nt\">--branch</span><span class=\"o\">=</span>feat/service-worker\n</code></pre></div></div>\n\n<p>The branch <code class=\"language-plaintext highlighter-rouge\">master</code> is the one which is always available to check out and also has the latest changes:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt amsf-update <span class=\"nt\">--branch</span><span class=\"o\">=</span>master\n</code></pre></div></div>\n\n<p>If you messed up with the testing branch, don’t worry, you can just run a normal update to revert them back:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt amsf-update\n</code></pre></div></div>\n\n<h2 id=\"download\">Download</h2>\n\n<p>Go to the <a href=\"https://github.com/sparanoid/almace-scaffolding\">GitHub repository</a> for downloads, bug reports, and feature requests.</p>\n\n<h2 id=\"jekyll-migration\">Jekyll Migration</h2>\n\n<p>You can simply copy all posts from your old Jekyll setup into <code class=\"language-plaintext highlighter-rouge\">_app/_posts</code>, you can also transfer your custom pages into <code class=\"language-plaintext highlighter-rouge\">_app/_pages/</code>.</p>",
      "excerpt": "",
      "languages": null,
      "categories": ["note"],
      "tags": ["getting-started"]
    }
    
  

  
    ,
    {
      "title": "Customizing Styles",
      "permalink": "http://0.0.0.0:4321/customizing-styles.html",
      "link": "http://0.0.0.0:4321/customizing-styles.html",
      "date": "2014-06-11T00:00:00-07:00",
      
        "modified": "2019-02-18T22:51:32-08:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>You can customize the basic look and feel without touching the theme files by changing <code class=\"language-plaintext highlighter-rouge\">user.js</code> and <code class=\"language-plaintext highlighter-rouge\">user.scss</code>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── _app/\n|   ├── assets/\n|   |   └── _js/\n|   |   |   └── user.js\n|   |   └── _scss/\n|   |   |   └── user.scss\n|   |   └── themes/\n|   |   |   └── ...\n</code></pre></div></div>\n\n<p>These files won’t be overwritten when you update Almace Scaffolding or update your themes.</p>",
      "excerpt": "You can customize the basic look and feel without touching the theme files by changing user.js and user.scss:",
      "languages": null,
      "categories": ["note"],
      "tags": ["customization"]
    }
    
  

  
    ,
    {
      "title": "Configuration",
      "permalink": "http://0.0.0.0:4321/configuration.html",
      "link": "http://0.0.0.0:4321/configuration.html",
      "date": "2014-06-11T00:00:00-07:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<h2 id=\"configuration-settings\">Configuration Settings</h2>\n\n<ul>\n  <li>All AMSF built-in settings can be configured at <a href=\"https://github.com/sparanoid/almace-scaffolding/blob/master/_config.yml\"><code class=\"language-plaintext highlighter-rouge\">_config.yml</code></a>.</li>\n  <li>Theme specific variables can be found at <code class=\"language-plaintext highlighter-rouge\">./_app/_data/theme-name.yml</code>.</li>\n  <li>Additional variables are stored in <a href=\"https://github.com/sparanoid/almace-scaffolding/blob/master/_app/_data\"><code class=\"language-plaintext highlighter-rouge\">./_app/_data/</code></a> directory. They can be accessed by Jekyll. (<a href=\"https://jekyllrb.com/docs/datafiles/\">More info</a>)</li>\n  <li>You should also change <code class=\"language-plaintext highlighter-rouge\">favicon.*</code> and <code class=\"language-plaintext highlighter-rouge\">apple-touch-icon.png</code> to yours.</li>\n  <li><code class=\"language-plaintext highlighter-rouge\">logo.png</code> is mainly used by Open Graph and Twitter Cards when there’s no featured image in a post, you should also design your own.</li>\n  <li>More customization please refer to theme-specific documentation</li>\n</ul>\n\n<h2 id=\"tips\">Tips</h2>\n\n<ul>\n  <li>Not familiar with <a href=\"https://daringfireball.net/projects/markdown/\">Markdown</a>? Try <a href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\">Markdown Cheatsheet</a>.</li>\n  <li>You can use Jekyll’s <a href=\"https://jekyllrb.com/docs/templates/#code-snippet-highlighting\">built-in syntax highlighting</a>, I’ve included a default theme for this project.</li>\n  <li><a href=\"https://kramdown.gettalong.org/quickref.html#tables\">Tables</a> and <a href=\"https://kramdown.gettalong.org/quickref.html#footnotes\">footnotes</a> are also available to use.</li>\n</ul>",
      "excerpt": "Configuration Settings",
      "languages": null,
      "categories": ["note"],
      "tags": ["getting-started"]
    }
    
  

  
    ,
    {
      "title": "Themes",
      "permalink": "http://0.0.0.0:4321/themes.html",
      "link": "http://0.0.0.0:4321/themes.html",
      "date": "2014-06-10T00:00:00-07:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<h2 id=\"overview\">Overview</h2>\n\n<p>In the latest build, I’ve added multiple themes support, finally, you can switch themes with just one command.</p>\n\n<p class=\"note\">This is an experimental feature and may change until the feature stabilizes.</p>\n\n<h2 id=\"installing-themes\">Installing Themes</h2>\n\n<p>The AMSF framework ships a default theme <a href=\"https://github.com/amsf/amsf-curtana\">Curtana</a>. You can also install as many themes as you like and switch to the one you prefer at any time.</p>\n\n<h3 id=\"via-git-github\">Via Git (GitHub)</h3>\n\n<p>The easiest way to install a new theme is via <code class=\"language-plaintext highlighter-rouge\">theme-add</code>, the following command will install theme Curtana from its official repo <code class=\"language-plaintext highlighter-rouge\">amsf/amsf-curtana</code>:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt theme-add <span class=\"nt\">--theme</span><span class=\"o\">=</span>curtana\n</code></pre></div></div>\n\n<p>If you’d install a custom theme from other users, append <code class=\"language-plaintext highlighter-rouge\">--user</code> in your command, the following command will install a new theme named <code class=\"language-plaintext highlighter-rouge\">bootstrap-sass</code> from <code class=\"language-plaintext highlighter-rouge\">sparanoid/amsf-bootstrap-sass</code></p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt theme-add <span class=\"nt\">--theme</span><span class=\"o\">=</span>bootstrap-sass <span class=\"nt\">--user</span><span class=\"o\">=</span>sparanoid\n</code></pre></div></div>\n\n<h3 id=\"manually-install\">Manually Install</h3>\n\n<p>You can also install themes manually. find an AMSF theme (Curtana, for example), download the package and uncompress all files to <code class=\"language-plaintext highlighter-rouge\">.amsf-cache/themes</code> directory, the file structure should look like:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── .amsf-cache/ (Almace Scaffolding cache directory)\n|   ├── themes/\n|   |   └── curtana/\n|   |   |   └── assets/\n|   |   |   └── includes/\n|   |   |   └── layouts/\n|   |   |   └── pages/\n|   |   |   └── config.yml\n└── _app/\n</code></pre></div></div>\n\n<p>Then execute the following command:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt activate <span class=\"nt\">--theme</span><span class=\"o\">=</span>curtana\n</code></pre></div></div>\n\n<p>Your current theme will be backed up to <code class=\"language-plaintext highlighter-rouge\">.amsf-cache/themes/your-old-theme/</code> and the new theme <code class=\"language-plaintext highlighter-rouge\">curtana</code> will be installed to the appropriate directories.</p>\n\n<h2 id=\"upgrading-themes\">Upgrading Themes</h2>\n\n<p>You can update your current activated theme by the following command. The activated theme will be downloaded from GitHub automatically if there’s any update:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt theme-update\n</code></pre></div></div>\n\n<p>Please note that only themes added via GitHub can be updated.</p>",
      "excerpt": "Overview",
      "languages": null,
      "categories": ["note"],
      "tags": ["customization"]
    }
    
  

  
    ,
    {
      "title": "Creating Your Own Theme",
      "permalink": "http://0.0.0.0:4321/creating-themes.html",
      "link": "http://0.0.0.0:4321/creating-themes.html",
      "date": "2014-06-09T00:00:00-07:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<h2 id=\"overview\">Overview</h2>\n\n<p>You can create your own theme in AMSF, theme files are located in the following location (I use default theme Curtana here for better understanding):</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── _app/\n|   ├── _data/\n|   |   └── curtana.yml\n|   ├── _includes/\n|   |   └── themes/\n|   |   |   └── curtana/\n|   |   |   |   └── includes/\n|   |   |   |   └── layouts/\n|   ├── _pages/\n|   |   └── themes/\n|   |   |   └── curtana/\n|   |   |   |   └── example-page.md\n|   |   |   |   └── ...\n|   ├── assets/\n|   |   └── themes/\n|   |   |   └── curtana/\n|   |   |   |   └── _js/\n|   |   |   |   └── _scss/\n|   |   |   |   └── ...\n</code></pre></div></div>\n\n<p>The theme specific config <code class=\"language-plaintext highlighter-rouge\">curtana.yml</code> should have the same filename as your theme name. It should contain theme-specific variables and can also override AMSF built-in settings.</p>\n\n<p>More info about theme structure you can check out my default theme <a href=\"https://github.com/amsf/amsf-curtana\">Curtana</a>.</p>\n\n<p>You can also have multiple themes in your project, as many as you like. For example if you also have themes Bootstrap and Ghost installed, the file structure should be:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── _app/\n|   ├── _data/\n|   |   └── bootstrap.yml\n|   |   └── curtana.yml\n|   |   └── ghost.yml\n|   ├── _includes/\n|   |   └── themes/\n|   |   |   └── bootstrap/\n|   |   |   |   └── includes/\n|   |   |   |   └── layouts/\n|   |   |   └── curtana/\n|   |   |   |   └── includes/\n|   |   |   |   └── layouts/\n|   |   |   └── ghost/\n|   |   |   |   └── includes/\n|   |   |   |   └── layouts/\n|   ├── _pages/\n|   |   └── themes/\n|   |   |   └── bootstrap/\n|   |   |   |   └── example-about.md\n|   |   |   |   └── example-blog.md\n|   |   |   |   └── example-fluid-container.md\n|   |   |   |   └── ...\n|   |   |   └── curtana/\n|   |   |   |   └── example-about.md\n|   |   |   |   └── example-news.md\n|   |   |   |   └── ...\n|   |   |   └── ghost/\n|   |   |   |   └── example-archive.md\n|   |   |   |   └── example-page.md\n|   |   |   |   └── example-tagcloud.md\n|   |   |   |   └── ...\n|   ├── assets/\n|   |   └── themes/\n|   |   |   └── bootstrap/\n|   |   |   |   └── _coffee/\n|   |   |   |   └── _scss/\n|   |   |   |   └── images/\n|   |   |   └── curtana/\n|   |   |   |   └── _js/\n|   |   |   |   └── _scss/\n|   |   |   |   └── svg/\n|   |   |   └── ghost/\n|   |   |   |   └── _js/\n|   |   |   |   └── _less/\n|   |   |   |   └── fonts/\n...\n</code></pre></div></div>\n\n<h2 id=\"amsf-options\">AMSF Options</h2>\n\n<p>There’re several built-in options you can use in your theme. These options can also be overridden in theme-specific config.</p>\n\n<h3 id=\"sitename\"><code class=\"language-plaintext highlighter-rouge\">site.name</code></h3>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;footer</span> <span class=\"na\">class=</span><span class=\"s\">\"footer\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;ul&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/\"</span><span class=\"nt\">&gt;</span>{{ site.name }}<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/atom.xml\"</span><span class=\"nt\">&gt;</span>Atom<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;/ul&gt;</span>\n<span class=\"nt\">&lt;/footer&gt;</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;footer</span> <span class=\"na\">class=</span><span class=\"s\">\"footer\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;ul&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/\"</span><span class=\"nt\">&gt;</span>Almace Scaffolding<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n    <span class=\"nt\">&lt;li&gt;&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"/atom.xml\"</span><span class=\"nt\">&gt;</span>Atom<span class=\"nt\">&lt;/a&gt;&lt;/li&gt;</span>\n  <span class=\"nt\">&lt;/ul&gt;</span>\n<span class=\"nt\">&lt;/footer&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"sitedescription\"><code class=\"language-plaintext highlighter-rouge\">site.description</code></h3>\n\n<p>Site description will appear in the document meta and Atom feed subtitle.</p>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">property=</span><span class=\"s\">\"og:description\"</span> <span class=\"na\">content=</span><span class=\"s\">\"{{ site.description }}\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">property=</span><span class=\"s\">\"og:description\"</span> <span class=\"na\">content=</span><span class=\"s\">\"A super-fast Jekyll framework fighting against the website obesity.\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"sitefile\"><code class=\"language-plaintext highlighter-rouge\">site.file</code></h3>\n\n<p>Media assets URL used in posts, without trailing slash. In most cases this URL should be powered by a CDN provider.</p>\n\n<p>Config:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">file</span><span class=\"pi\">:</span> <span class=\"s\">//d349cztnlupsuf.cloudfront.net</span>\n</code></pre></div></div>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"{{ site.file }}/post-thumbnail.jpg\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;img</span> <span class=\"na\">src=</span><span class=\"s\">\"//d349cztnlupsuf.cloudfront.net/post-thumbnail.jpg\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"sitetwitter\"><code class=\"language-plaintext highlighter-rouge\">site.twitter</code></h3>\n\n<p>Site Twitter account handle.</p>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"https://twitter.com/{{ site.twitter }}\"</span><span class=\"nt\">&gt;</span>Follow @{{ site.twitter }} on Twitter<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"https://twitter.com/sparanoid\"</span><span class=\"nt\">&gt;</span>Follow @sparanoid on Twitter<span class=\"nt\">&lt;/a&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"siteforce_utf_8\"><code class=\"language-plaintext highlighter-rouge\">site.force_utf_8</code></h3>\n\n<p>Force UTF-8 encoding, enable this will simply add <code class=\"language-plaintext highlighter-rouge\">&lt;meta charset=\"utf-8\"&gt;</code> to the head of your pages.</p>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>{% if site.force_utf_8 %}\n  <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"utf-8\"</span><span class=\"nt\">&gt;</span>\n{% endif %}\n</code></pre></div></div>\n\n<h3 id=\"siterobots\"><code class=\"language-plaintext highlighter-rouge\">site.robots</code></h3>\n\n<p>You can define your own records in <code class=\"language-plaintext highlighter-rouge\">robots.txt</code>.</p>\n\n<p>Config:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">robots</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">User-agent:</span><span class=\"nv\"> </span><span class=\"s\">*\"</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">Disallow:</span><span class=\"nv\"> </span><span class=\"s\">/ajax/\"</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">Disallow:</span><span class=\"nv\"> </span><span class=\"s\">/@async\"</span>\n  <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">Disallow:</span><span class=\"nv\"> </span><span class=\"s\">/log/\"</span>\n</code></pre></div></div>\n\n<h2 id=\"theme-features\">Theme Features</h2>\n\n<p>There’re some features can be integrated into your theme.</p>\n\n<h3 id=\"basic-multi-language-support\">(Basic) Multi-Language Support</h3>\n\n<p>You can define post/page language in your front-matter field:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">lang</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">zh-tw</span>\n</code></pre></div></div>\n\n<p>An additional <code class=\"language-plaintext highlighter-rouge\">lang</code> HTML attribute will be added to your final rendering:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;article</span> <span class=\"na\">lang=</span><span class=\"s\">\"zh-tw\"</span><span class=\"nt\">&gt;</span>\n  ...\n<span class=\"nt\">&lt;/article&gt;</span>\n</code></pre></div></div>\n\n<p>If your post/page content is multilingual, you can also define multiple languages in array:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">lang</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"s\">zh-tw</span>\n  <span class=\"pi\">-</span> <span class=\"s\">en-us</span>\n</code></pre></div></div>\n\n<p>Please note that only the first item defined in <code class=\"language-plaintext highlighter-rouge\">lang</code> array will be used in final <code class=\"language-plaintext highlighter-rouge\">lang</code> output, the additional languages will be available in JSON feed output:</p>\n\n<div class=\"language-json highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"nl\">\"languages\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"zh-tw\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s2\">\"en-us\"</span><span class=\"p\">],</span><span class=\"w\">\n  </span><span class=\"nl\">\"categories\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"note\"</span><span class=\"p\">],</span><span class=\"w\">\n  </span><span class=\"nl\">\"tags\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s2\">\"miscellaneous\"</span><span class=\"p\">]</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<h3 id=\"smooshing-assets\">Smooshing Assets</h3>\n\n<p>For better performance, Almace Scaffolding will find all the CSS, script links and images in compiled HTML, and outputs a version with all the CSS, scripts and images (Base64) written inline. Sounds cool? but it needs theme support. Here’s how:</p>\n\n<p>You can simply add the query string <code class=\"language-plaintext highlighter-rouge\">?assets-inline</code> at the end of the file you’d like to be inlined in production site:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- This CSS will be inlined into HTML --&gt;</span>\n<span class=\"nt\">&lt;link</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span> <span class=\"na\">href=</span><span class=\"s\">\"{{ '/css/app.css?assets-inline' | prepend: amsf_theme_assets }}\"</span><span class=\"nt\">&gt;</span>\n\n<span class=\"c\">&lt;!-- This script will be inlined into HTML --&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"{{ '/js/app.js?assets-inline' | prepend: amsf_theme_assets }}\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"user-custom-styles-support\">User Custom Styles Support</h3>\n\n<p>Define the following code snippet into your theme styles (Sass) will allow users to custom your theme without touching the theme files:</p>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">//</span> <span class=\"nt\">Import</span> <span class=\"nt\">user</span> <span class=\"nt\">custom</span> <span class=\"nt\">styles</span>\n<span class=\"k\">@import</span> <span class=\"s1\">\"../../../_scss/custom\"</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<h3 id=\"user-custom-scripts-support\">User Custom Scripts Support</h3>\n\n<p>Define the following code snippet into your theme template (it’s recommended to put it in footer) will allow users to add custom scripts without touching the theme files:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- User custom scripts --&gt;</span>\n<span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"{{ '/js/user.js?assets-inline' | prepend: amsf_user_assets }}\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"page--post-specific-css-block-support\">Page / Post Specific CSS Block Support</h3>\n\n<p>This allows your user to define page / post specific CSS blocks in front-matter data:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- Page-wide custom CSS --&gt;</span>\n{{ amsf_page_css }}\n</code></pre></div></div>\n\n<h3 id=\"google-analytics-support\">Google Analytics Support</h3>\n\n<p>This allows your user to be able to use Google Analytics for their site, tracking ID can be changed in the config file:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">&lt;!-- Google Analytics tracking code --&gt;</span>\n{{ amsf_google_analytics }}\n</code></pre></div></div>\n\n<h3 id=\"post-published-time\">Post Published Time</h3>\n\n<p>This allows you to get the published time of the current post.</p>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">property=</span><span class=\"s\">\"article:published_time\"</span> <span class=\"na\">content=</span><span class=\"s\">\"{{ amsf_page_pubdate | date_to_xmlschema }}\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">property=</span><span class=\"s\">\"article:published_time\"</span> <span class=\"na\">content=</span><span class=\"s\">\"2014-01-01T00:00:00+08:00\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"post-modified-time\">Post Modified Time</h3>\n\n<p>This allows you to get the modified time of the current post.</p>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">property=</span><span class=\"s\">\"article:modified_time\"</span> <span class=\"na\">content=</span><span class=\"s\">\"{{ amsf_page_update | date_to_xmlschema }}\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;meta</span> <span class=\"na\">property=</span><span class=\"s\">\"article:modified_time\"</span> <span class=\"na\">content=</span><span class=\"s\">\"2014-01-03T03:17:49+08:00\"</span><span class=\"nt\">&gt;</span>\n</code></pre></div></div>\n\n<h3 id=\"post-reading-time\">Post Reading Time</h3>\n\n<p>This allows you to show the average reading time of current post.</p>\n\n<p>Template:</p>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Reading time: {{ amsf_page_reading_time }}\n</code></pre></div></div>\n\n<p>Output:</p>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gh\"># Less than 200 words</span>\nReading time: Less than 1 min\n\n<span class=\"gh\"># Around 200 words</span>\nReading time: 1 min\n\n<span class=\"gh\"># More than 200 words</span>\nReading time: 34 mins\n\n<span class=\"gh\"># More than 1 hour</span>\nReading time: 1 hr\nReading time: 1 hr 1 min\nReading time: 3 hrs 20 mins\n</code></pre></div></div>\n\n<h2 id=\"publishing-themes\">Publishing Themes</h2>\n\n<p>You really like your custom design and wanna show it off to the world? Cool, you can create (pack) you own theme by the following command:</p>\n\n<div class=\"language-sh highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nv\">$ </span>grunt theme-save\n</code></pre></div></div>\n\n<p>The activated theme will be saved to AMSF cache (<code class=\"language-plaintext highlighter-rouge\">.amsf-cache/</code>) with correct file and directory structure, then you can upload your theme to GitHub.</p>\n\n<p>Still confusing? see my default theme <a href=\"https://github.com/amsf/amsf-curtana\">Curtana</a> for reference.</p>",
      "excerpt": "Overview",
      "languages": null,
      "categories": ["note"],
      "tags": ["customization"]
    }
    
  

  
    ,
    {
      "title": "Syntax Highlighting",
      "permalink": "http://0.0.0.0:4321/syntax-highlighting.html",
      "link": "http://0.0.0.0:4321/syntax-highlighting.html",
      "date": "2014-06-06T00:00:00-07:00",
      
        "modified": "2018-10-15T10:28:58-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>Code highlighting demo, powered by Rouge. More info about code highlighting can be found at <a href=\"https://jekyllrb.com/docs/templates/#code-snippet-highlighting\">Jekyll’s documentation</a>.</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>.code-text (@link, @text) when (lightness(@link) &gt;= 50%) and (lightness(@link) &lt; lightness(@text)) {\n  @return-color: lighten(@text, 20%);\n  @return-value: 30%;\n}\n</code></pre></div></div>\n\n<div class=\"language-diff highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"err\">{</span>\n  \"scripts\": {\n<span class=\"gd\">-   \"precommit\": \"npm test\",\n-   \"commitmsg\": \"commitlint -E GIT_PARAMS\"\n</span>  },\n<span class=\"gi\">+ \"husky\": {\n+   \"hooks\": {\n+     \"pre-commit\": \"npm test\",\n+     \"commit-msg\": \"commitlint -E HUSKY_GIT_PARAMS\"\n+   }\n+ }\n</span><span class=\"err\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-ruby highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">show</span>\n  <span class=\"vi\">@widget</span> <span class=\"o\">=</span> <span class=\"no\">Widget</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">])</span>\n  <span class=\"n\">respond_to</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"nb\">format</span><span class=\"o\">|</span>\n    <span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">html</span> <span class=\"c1\"># show.html.erb</span>\n    <span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">json</span> <span class=\"p\">{</span> <span class=\"n\">render</span> <span class=\"ss\">json: </span><span class=\"vi\">@widget</span> <span class=\"p\">}</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</code></pre></div></div>\n\n<div class=\"language-php highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">echo</span> <span class=\"s2\">\"Hello, world!\"</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\" data-lang=\"ruby\"><span class=\"k\">def</span> <span class=\"nf\">print_hi</span><span class=\"p\">(</span><span class=\"nb\">name</span><span class=\"p\">)</span>\n  <span class=\"nb\">puts</span> <span class=\"s2\">\"Hi, </span><span class=\"si\">#{</span><span class=\"nb\">name</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n<span class=\"k\">end</span>\n<span class=\"n\">print_hi</span><span class=\"p\">(</span><span class=\"s1\">'Tom'</span><span class=\"p\">)</span>\n<span class=\"c1\">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>\n\n<figure class=\"highlight\"><pre><code class=\"language-html\" data-lang=\"html\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n</pre></td><td class=\"code\"><pre><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Title!<span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;h1</span> <span class=\"na\">id=</span><span class=\"s\">\"title\"</span> <span class=\"na\">class=</span><span class=\"s\">\"heading\"</span><span class=\"nt\">&gt;</span>Example<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;p</span> <span class=\"na\">id=</span><span class=\"s\">\"foo\"</span><span class=\"nt\">&gt;</span>Hello, World!<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span><span class=\"nt\">&gt;</span><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"nt\">&lt;/script&gt;</span>\n    <span class=\"nt\">&lt;style </span><span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span><span class=\"nt\">&gt;</span><span class=\"nf\">#foo</span> <span class=\"p\">{</span> <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"nb\">bold</span><span class=\"p\">;</span> <span class=\"p\">}</span><span class=\"nt\">&lt;/style&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<div class=\"language-js highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// Load the http module to create an http server.</span>\n<span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">http</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Configure our HTTP server to respond with Hello World to all requests.</span>\n<span class=\"kd\">var</span> <span class=\"nx\">server</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"dl\">\"</span><span class=\"s2\">Content-Type</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">text/plain</span><span class=\"dl\">\"</span><span class=\"p\">});</span>\n  <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Hello World</span><span class=\"se\">\\n</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"c1\">// Listen on port 8000, IP defaults to 127.0.0.1</span>\n<span class=\"nx\">server</span><span class=\"p\">.</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8000</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Put a friendly message on the terminal</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"dl\">\"</span><span class=\"s2\">Server running at https://127.0.0.1:8000/</span><span class=\"dl\">\"</span><span class=\"p\">);</span>\n</code></pre></div></div>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">.code-text</span> <span class=\"o\">(</span><span class=\"k\">@link</span><span class=\"p\">,</span> <span class=\"err\">@</span><span class=\"nb\">text</span><span class=\"p\">)</span> <span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">lightness</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"n\">link</span><span class=\"p\">)</span> <span class=\"err\">&gt;=</span> <span class=\"m\">50%</span><span class=\"p\">)</span> <span class=\"n\">and</span> <span class=\"p\">(</span><span class=\"n\">lightness</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"n\">link</span><span class=\"p\">)</span> <span class=\"err\">&lt;</span> <span class=\"n\">lightness</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"nb\">text</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n  <span class=\"k\">@return-color</span><span class=\"p\">:</span> <span class=\"n\">lighten</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"nb\">text</span><span class=\"p\">,</span> <span class=\"m\">20%</span><span class=\"p\">);</span>\n  <span class=\"k\">@return-value</span><span class=\"p\">:</span> <span class=\"m\">30%</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;!doctype html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>Title!<span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;h1</span> <span class=\"na\">id=</span><span class=\"s\">\"title\"</span> <span class=\"na\">class=</span><span class=\"s\">\"heading\"</span><span class=\"nt\">&gt;</span>Example<span class=\"nt\">&lt;/h1&gt;</span>\n    <span class=\"nt\">&lt;p</span> <span class=\"na\">id=</span><span class=\"s\">\"foo\"</span><span class=\"nt\">&gt;</span>Hello, World!<span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">type=</span><span class=\"s\">\"text/javascript\"</span><span class=\"nt\">&gt;</span><span class=\"kd\">var</span> <span class=\"nx\">a</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"nt\">&lt;/script&gt;</span>\n    <span class=\"nt\">&lt;style </span><span class=\"na\">type=</span><span class=\"s\">\"text/css\"</span><span class=\"nt\">&gt;</span><span class=\"nf\">#foo</span> <span class=\"p\">{</span> <span class=\"nl\">font-weight</span><span class=\"p\">:</span> <span class=\"nb\">bold</span><span class=\"p\">;</span> <span class=\"p\">}</span><span class=\"nt\">&lt;/style&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</code></pre></div></div>\n\n<div class=\"language-llvm highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">; copied from https://llvm.org/docs/LangRef.html#module-structure</span>\n<span class=\"c1\">; Declare the string constant as a global constant.</span>\n<span class=\"vg\">@.str</span> <span class=\"p\">=</span> <span class=\"k\">private</span> <span class=\"k\">unnamed_addr</span> <span class=\"k\">constant</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]</span> <span class=\"s\">c\"hello world\\0A\\00\"</span>\n\n<span class=\"c1\">; External declaration of the puts function</span>\n<span class=\"k\">declare</span> <span class=\"kt\">i32</span> <span class=\"vg\">@puts</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"k\">nocapture</span><span class=\"p\">)</span> <span class=\"k\">nounwind</span>\n\n<span class=\"c1\">; Definition of main function</span>\n<span class=\"k\">define</span> <span class=\"kt\">i32</span> <span class=\"vg\">@main</span><span class=\"p\">()</span> <span class=\"p\">{</span>   <span class=\"c1\">; i32()*</span>\n  <span class=\"c1\">; Convert [13 x i8]* to i8  *...</span>\n  <span class=\"nv\">%cast210</span> <span class=\"p\">=</span> <span class=\"k\">getelementptr</span> <span class=\"p\">[</span><span class=\"m\">13</span> <span class=\"p\">x</span> <span class=\"kt\">i8</span><span class=\"p\">]*</span> <span class=\"vg\">@.str</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"kt\">i64</span> <span class=\"m\">0</span>\n\n  <span class=\"c1\">; Call puts function to write out the string to stdout.</span>\n  <span class=\"k\">call</span> <span class=\"kt\">i32</span> <span class=\"vg\">@puts</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">*</span> <span class=\"nv\">%cast210</span><span class=\"p\">)</span>\n  <span class=\"k\">ret</span> <span class=\"kt\">i32</span> <span class=\"m\">0</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">; Named metadata</span>\n<span class=\"nv\">!1</span> <span class=\"p\">=</span> <span class=\"kt\">metadata</span> <span class=\"p\">!{</span><span class=\"kt\">i32</span> <span class=\"m\">42</span><span class=\"p\">}</span>\n<span class=\"nv\">!foo</span> <span class=\"p\">=</span> <span class=\"p\">!{</span><span class=\"nv\">!1</span><span class=\"p\">,</span> <span class=\"k\">null</span><span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-xml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"cp\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span>\n<span class=\"nt\">&lt;xsl:template</span> <span class=\"na\">match=</span><span class=\"s\">\"/\"</span><span class=\"nt\">&gt;&lt;/xsl:template&gt;</span>\n</code></pre></div></div>\n\n<div class=\"language-moonscript highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">require</span><span class=\"w\"> </span><span class=\"s2\">\"my.module\"</span><span class=\"w\">\n\n</span><span class=\"n\">a_table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\">\n  </span><span class=\"ss\">foo:</span><span class=\"w\"> </span><span class=\"s1\">'bar'</span><span class=\"w\">\n  </span><span class=\"ss\">interpolated:</span><span class=\"w\"> </span><span class=\"s2\">\"foo-</span><span class=\"si\">#{</span><span class=\"n\">other</span><span class=\"p\">.</span><span class=\"n\">stuff</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"w\">\n  </span><span class=\"ss\">\"string\":</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\">\n  </span><span class=\"ss\">do:</span><span class=\"w\"> </span><span class=\"s1\">'keyword'</span><span class=\"w\">\n</span><span class=\"p\">}</span><span class=\"w\">\n\n</span><span class=\"k\">class</span><span class=\"w\"> </span><span class=\"nc\">MyClass</span><span class=\"w\"> </span><span class=\"k\">extends</span><span class=\"w\"> </span><span class=\"nc\">SomeClass</span><span class=\"w\">\n  </span><span class=\"ss\">new:</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"vi\">@init</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">'default'</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\">\n    </span><span class=\"vi\">@derived</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"vi\">@init</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\">\n    </span><span class=\"k\">super</span><span class=\"o\">!</span><span class=\"w\">\n\n  </span><span class=\"ss\">other:</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\">\n    </span><span class=\"vi\">@foo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\">\n</span></code></pre></div></div>\n\n<div class=\"language-apache highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nc\">AddDefaultCharset</span> UTF-8\n\n<span class=\"nc\">RewriteEngine</span> <span class=\"ss\">On</span>\n\n<span class=\"c\"># Serve gzipped version if available and accepted</span>\n<span class=\"nc\">AddEncoding</span> x-gzip .gz\n<span class=\"nc\">RewriteCond</span> %{HTTP:Accept-Encoding} gzip\n<span class=\"nc\">RewriteCond</span> %{REQUEST_FILENAME}.gz -f\n<span class=\"nc\">RewriteRule</span> ^(.*)$ $1.gz [QSA,L]\n<span class=\"p\">&lt;</span><span class=\"nl\">FilesMatch</span><span class=\"sr\"> \\.css\\.gz$</span><span class=\"p\">&gt;\n</span>  <span class=\"nc\">ForceType</span> text/css\n  <span class=\"nc\">Header</span> <span class=\"ss\">append</span> Vary Accept-Encoding\n<span class=\"p\">&lt;/</span><span class=\"nl\">FilesMatch</span><span class=\"p\">&gt;\n&lt;</span><span class=\"nl\">FilesMatch</span><span class=\"sr\"> \\.js\\.gz$</span><span class=\"p\">&gt;\n</span>  <span class=\"nc\">ForceType</span> application/javascript\n  <span class=\"nc\">Header</span> <span class=\"ss\">append</span> Vary Accept-Encoding\n<span class=\"p\">&lt;/</span><span class=\"nl\">FilesMatch</span><span class=\"p\">&gt;\n&lt;</span><span class=\"nl\">FilesMatch</span><span class=\"sr\"> \\.html\\.gz$</span><span class=\"p\">&gt;\n</span>  <span class=\"nc\">ForceType</span> text/html\n  <span class=\"nc\">Header</span> <span class=\"ss\">append</span> Vary Accept-Encoding\n<span class=\"p\">&lt;/</span><span class=\"nl\">FilesMatch</span><span class=\"p\">&gt;\n</span></code></pre></div></div>\n\n<div class=\"language-prolog highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"ss\">plus</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">),</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"ss\">plus</span><span class=\"p\">(</span><span class=\"nv\">DA</span><span class=\"p\">,</span> <span class=\"nv\">DB</span><span class=\"p\">))</span>\n   <span class=\"o\">&lt;=</span> <span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">DA</span><span class=\"p\">)</span> <span class=\"ss\">and</span> <span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">DB</span><span class=\"p\">).</span>\n\n<span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"ss\">times</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span><span class=\"nv\">B</span><span class=\"p\">),</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"ss\">plus</span><span class=\"p\">(</span><span class=\"ss\">times</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">DB</span><span class=\"p\">),</span> <span class=\"ss\">times</span><span class=\"p\">(</span><span class=\"nv\">DA</span><span class=\"p\">,</span> <span class=\"nv\">B</span><span class=\"p\">)))</span>\n   <span class=\"o\">&lt;=</span> <span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"nv\">A</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">DA</span><span class=\"p\">)</span> <span class=\"ss\">and</span> <span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"nv\">B</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">DB</span><span class=\"p\">).</span>\n\n<span class=\"ss\">equal</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">).</span>\n<span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"m\">1</span><span class=\"p\">).</span>\n<span class=\"ss\">diff</span><span class=\"p\">(</span><span class=\"nv\">Y</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">,</span> <span class=\"m\">0</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"ss\">not</span> <span class=\"ss\">equal</span><span class=\"p\">(</span><span class=\"nv\">Y</span><span class=\"p\">,</span> <span class=\"nv\">X</span><span class=\"p\">).</span>\n</code></pre></div></div>\n\n<div class=\"language-ocaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">(* Binary tree with leaves car­rying an integer. *)</span>\n<span class=\"k\">type</span> <span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"nc\">Leaf</span> <span class=\"k\">of</span> <span class=\"kt\">int</span> <span class=\"o\">|</span> <span class=\"nc\">Node</span> <span class=\"k\">of</span> <span class=\"n\">tree</span> <span class=\"o\">*</span> <span class=\"n\">tree</span>\n\n<span class=\"k\">let</span> <span class=\"k\">rec</span> <span class=\"n\">exists_leaf</span> <span class=\"n\">test</span> <span class=\"n\">tree</span> <span class=\"o\">=</span>\n  <span class=\"k\">match</span> <span class=\"n\">tree</span> <span class=\"k\">with</span>\n  <span class=\"o\">|</span> <span class=\"nc\">Leaf</span> <span class=\"n\">v</span> <span class=\"o\">-&gt;</span> <span class=\"n\">test</span> <span class=\"n\">v</span>\n  <span class=\"o\">|</span> <span class=\"nc\">Node</span> <span class=\"p\">(</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span>\n      <span class=\"n\">exists_leaf</span> <span class=\"n\">test</span> <span class=\"n\">left</span>\n      <span class=\"o\">||</span> <span class=\"n\">exists_leaf</span> <span class=\"n\">test</span> <span class=\"n\">right</span>\n\n<span class=\"k\">let</span> <span class=\"n\">has_even_leaf</span> <span class=\"n\">tree</span> <span class=\"o\">=</span>\n  <span class=\"n\">exists_leaf</span> <span class=\"p\">(</span><span class=\"k\">fun</span> <span class=\"n\">n</span> <span class=\"o\">-&gt;</span> <span class=\"n\">n</span> <span class=\"ow\">mod</span> <span class=\"mi\">2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">tree</span>\n</code></pre></div></div>\n\n<div class=\"language-sql highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">SELECT</span> <span class=\"o\">*</span> <span class=\"k\">FROM</span> <span class=\"nv\">`users`</span> <span class=\"k\">WHERE</span> <span class=\"nv\">`user`</span><span class=\"p\">.</span><span class=\"nv\">`id`</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</code></pre></div></div>\n\n<div class=\"language-smalltalk highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nf\">quadMultiply:</span> <span class=\"nv\">i1</span> <span class=\"nf\">and:</span> <span class=\"nv\">i2</span>\n    <span class=\"c\">\"This method multiplies the given numbers by each other\n    and the result by 4.\"</span>\n    <span class=\"p\">|</span><span class=\"nv\"> mul </span><span class=\"p\">|</span>\n    <span class=\"nv\">mul</span> <span class=\"o\">:=</span> <span class=\"nv\">i1</span> <span class=\"nf\">*</span> <span class=\"nv\">i2</span><span class=\"p\">.</span>\n    <span class=\"o\">^</span><span class=\"nv\">mul</span> <span class=\"nf\">*</span> <span class=\"m\">4</span>\n</code></pre></div></div>\n\n<div class=\"language-racket highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"o\">#</span><span class=\"nv\">lang</span> <span class=\"nv\">racket</span>\n\n<span class=\"c1\">;; draw a graph of cos and deriv^3(cos)</span>\n<span class=\"p\">(</span><span class=\"k\">require</span> <span class=\"nv\">plot</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">((</span><span class=\"nf\">deriv</span> <span class=\"nv\">f</span><span class=\"p\">)</span> <span class=\"nv\">x</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"nb\">/</span> <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"p\">(</span><span class=\"nf\">f</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">f</span> <span class=\"p\">(</span><span class=\"nb\">-</span> <span class=\"nv\">x</span> <span class=\"mf\">0.001</span><span class=\"p\">)))</span> <span class=\"mf\">0.001</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"p\">(</span><span class=\"nf\">thrice</span> <span class=\"nv\">f</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"p\">(</span><span class=\"nf\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nf\">f</span> <span class=\"p\">(</span><span class=\"nf\">f</span> <span class=\"p\">(</span><span class=\"nf\">f</span> <span class=\"nv\">x</span><span class=\"p\">)))))</span>\n<span class=\"p\">(</span><span class=\"nf\">plot</span> <span class=\"p\">(</span><span class=\"nb\">list</span> <span class=\"p\">(</span><span class=\"nf\">function</span> <span class=\"p\">((</span><span class=\"nf\">thrice</span> <span class=\"nv\">deriv</span><span class=\"p\">)</span> <span class=\"nv\">sin</span><span class=\"p\">)</span> <span class=\"mi\">-5</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"nf\">function</span> <span class=\"nv\">cos</span> <span class=\"mi\">-5</span> <span class=\"mi\">5</span> <span class=\"nt\">#:color</span> <span class=\"ss\">'blue</span><span class=\"p\">)))</span>\n\n<span class=\"c1\">;; Print the Greek alphabet</span>\n<span class=\"p\">(</span><span class=\"nf\">for</span> <span class=\"p\">([</span><span class=\"nf\">i</span> <span class=\"p\">(</span><span class=\"nf\">in-range</span> <span class=\"mi\">25</span><span class=\"p\">)])</span>\n  <span class=\"p\">(</span><span class=\"nb\">displayln</span>\n   <span class=\"p\">(</span><span class=\"nb\">integer-&gt;char</span>\n    <span class=\"p\">(</span><span class=\"nb\">+</span> <span class=\"nv\">i</span> <span class=\"p\">(</span><span class=\"nb\">char-&gt;integer</span> <span class=\"sc\">#\\u3B1</span><span class=\"p\">)))))</span>\n\n<span class=\"c1\">;; An echo server</span>\n<span class=\"p\">(</span><span class=\"k\">define</span> <span class=\"nv\">listener</span> <span class=\"p\">(</span><span class=\"k\">tcp-listen</span> <span class=\"mi\">12345</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\">let</span> <span class=\"nv\">echo-server</span> <span class=\"p\">()</span>\n  <span class=\"p\">(</span><span class=\"k\">define-values</span> <span class=\"p\">(</span><span class=\"nf\">in</span> <span class=\"nv\">out</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">tcp-accept</span> <span class=\"nv\">listener</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\">thread</span> <span class=\"p\">(</span><span class=\"k\">λ</span> <span class=\"p\">()</span>\n             <span class=\"p\">(</span><span class=\"nf\">copy-port</span> <span class=\"nv\">in</span> <span class=\"nv\">out</span><span class=\"p\">)</span>\n             <span class=\"p\">(</span><span class=\"nb\">close-output-port</span> <span class=\"nv\">out</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"nf\">echo-server</span><span class=\"p\">))</span>\n</code></pre></div></div>\n\n<div class=\"language-puppet highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"n\">service</span> <span class=\"p\">{</span> <span class=\"s1\">'ntp'</span><span class=\"p\">:</span>\n  <span class=\"py\">name</span>      <span class=\"p\">=&gt;</span> <span class=\"nv\">$service_name</span><span class=\"p\">,</span>\n  <span class=\"py\">ensure</span>    <span class=\"p\">=&gt;</span> <span class=\"n\">running</span><span class=\"p\">,</span>\n  <span class=\"py\">enable</span>    <span class=\"p\">=&gt;</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n  <span class=\"kp\">subscribe</span> <span class=\"p\">=&gt;</span> <span class=\"nc\">File</span><span class=\"p\">[</span><span class=\"s1\">'ntp.conf'</span><span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-dart highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n  <span class=\"kd\">var</span> <span class=\"n\">collection</span><span class=\"o\">=[</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">,</span><span class=\"mi\">4</span><span class=\"o\">,</span><span class=\"mi\">5</span><span class=\"o\">];</span>\n  <span class=\"k\">for</span><span class=\"o\">(</span><span class=\"kd\">var</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">collection</span><span class=\"o\">){</span>\n    <span class=\"n\">print</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">);</span>\n  <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-tcl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>proc cross_sum <span class=\"p\">{</span>s<span class=\"p\">}</span> <span class=\"p\">{</span>expr <span class=\"p\">[</span>join <span class=\"p\">[</span>split $s <span class=\"s2\">\"\"</span><span class=\"p\">]</span> +<span class=\"p\">]}</span>\n</code></pre></div></div>\n\n<div class=\"language-csharp highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">// reverse byte order (16-bit)</span>\n<span class=\"k\">public</span> <span class=\"k\">static</span> <span class=\"n\">UInt16</span> <span class=\"nf\">ReverseBytes</span><span class=\"p\">(</span><span class=\"n\">UInt16</span> <span class=\"k\">value</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n  <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">UInt16</span><span class=\"p\">)((</span><span class=\"k\">value</span> <span class=\"p\">&amp;</span> <span class=\"m\">0xFFU</span><span class=\"p\">)</span> <span class=\"p\">&lt;&lt;</span> <span class=\"m\">8</span> <span class=\"p\">|</span> <span class=\"p\">(</span><span class=\"k\">value</span> <span class=\"p\">&amp;</span> <span class=\"m\">0xFF00U</span><span class=\"p\">)</span> <span class=\"p\">&gt;&gt;</span> <span class=\"m\">8</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<div class=\"language-vb highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">Private</span> <span class=\"k\">Sub</span> <span class=\"nf\">Form_Load</span><span class=\"p\">()</span>\n    <span class=\"c1\">' Execute a simple message box that says \"Hello, World!\"</span>\n    <span class=\"n\">MsgBox</span> <span class=\"s\">\"Hello, World!\"</span>\n<span class=\"k\">End</span> <span class=\"k\">Sub</span>\n</code></pre></div></div>\n\n<div class=\"language-python highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"k\">def</span> <span class=\"nf\">fib</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>    <span class=\"c1\"># write Fibonacci series up to n\n</span>    <span class=\"s\">\"\"\"Print a Fibonacci series up to n.\"\"\"</span>\n    <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span>\n    <span class=\"k\">while</span> <span class=\"n\">a</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">:</span>\n        <span class=\"k\">print</span> <span class=\"n\">a</span><span class=\"p\">,</span>\n        <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span>\n</code></pre></div></div>\n\n<div class=\"language-perl highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c1\">#!/usr/bin/env perl</span>\n<span class=\"k\">use</span> <span class=\"nv\">warnings</span><span class=\"p\">;</span>\n<span class=\"k\">print</span> <span class=\"p\">\"</span><span class=\"s2\">a: </span><span class=\"p\">\";</span>\n<span class=\"k\">my</span> <span class=\"nv\">$a</span> <span class=\"o\">=</span> <span class=\"p\">\"</span><span class=\"s2\">foo</span><span class=\"p\">\";</span>\n<span class=\"k\">print</span> <span class=\"nv\">$a</span><span class=\"p\">;</span>\n</code></pre></div></div>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Markdown has cool <span class=\"p\">[</span><span class=\"nv\">reference links</span><span class=\"p\">][</span><span class=\"ss\">ref 1</span><span class=\"p\">]</span>\nand <span class=\"p\">[</span><span class=\"nv\">regular links too</span><span class=\"p\">](</span><span class=\"sx\">https://example.com</span><span class=\"p\">)</span>\n\n<span class=\"p\">[</span><span class=\"ss\">ref 1</span><span class=\"p\">]:</span> <span class=\"sx\">https://example.com</span>\n</code></pre></div></div>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">set PHP-FPM parameters</span>\n  <span class=\"na\">lineinfile</span><span class=\"pi\">:</span>\n    <span class=\"na\">dest</span><span class=\"pi\">:</span> <span class=\"s\">/etc/php-fpm.conf</span>\n    <span class=\"na\">regexp</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">^\"</span>\n    <span class=\"na\">insertafter</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">^;\"</span>\n    <span class=\"na\">line</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"nv\"> </span><span class=\"s\">=</span><span class=\"nv\"> </span><span class=\"s\">\"</span>\n  <span class=\"na\">with_items</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"pi\">{</span> <span class=\"nv\">param</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">error_log'</span><span class=\"pi\">,</span> <span class=\"nv\">value</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">/var/log/php-fpm/error.log'</span> <span class=\"pi\">}</span>\n    <span class=\"pi\">-</span> <span class=\"pi\">{</span> <span class=\"nv\">param</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">log_level'</span><span class=\"pi\">,</span> <span class=\"nv\">value</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">error'</span> <span class=\"pi\">}</span>\n    <span class=\"pi\">-</span> <span class=\"pi\">{</span> <span class=\"nv\">param</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">emergency_restart_threshold'</span><span class=\"pi\">,</span> <span class=\"nv\">value</span><span class=\"pi\">:</span> <span class=\"s1\">'</span><span class=\"s\">10'</span> <span class=\"pi\">}</span>\n</code></pre></div></div>",
      "excerpt": "Code highlighting demo, powered by Rouge. More info about code highlighting can be found at Jekyll’s documentation.",
      "languages": null,
      "categories": ["note"],
      "tags": ["miscellaneous"]
    }
    
  

  
    ,
    {
      "title": "Markdown Features Test",
      "permalink": "http://0.0.0.0:4321/markdown-features-test.html",
      "link": "http://0.0.0.0:4321/markdown-features-test.html",
      "date": "2014-06-06T00:00:00-07:00",
      
        "modified": "2018-08-10T07:04:53-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<h2 id=\"indented-code-blocks\">Indented Code Blocks</h2>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>def show\n  @widget = Widget(params[:id])\n  respond_to do |format|\n    format.html # show.html.erb\n    format.json { render json: @widget }\n  end\nend\n</code></pre></div></div>\n\n<h2 id=\"liquid-tag-with-linenos-support\">Liquid Tag with <code class=\"language-plaintext highlighter-rouge\">linenos</code> Support</h2>\n\n<figure class=\"highlight\"><pre><code class=\"language-ruby\" data-lang=\"ruby\"><table class=\"rouge-table\"><tbody><tr><td class=\"gutter gl\"><pre class=\"lineno\">1\n2\n3\n4\n5\n6\n7\n</pre></td><td class=\"code\"><pre><span class=\"k\">def</span> <span class=\"nf\">show</span>\n  <span class=\"vi\">@widget</span> <span class=\"o\">=</span> <span class=\"no\">Widget</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"ss\">:id</span><span class=\"p\">])</span>\n  <span class=\"n\">respond_to</span> <span class=\"k\">do</span> <span class=\"o\">|</span><span class=\"nb\">format</span><span class=\"o\">|</span>\n    <span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">html</span> <span class=\"c1\"># show.html.erb</span>\n    <span class=\"nb\">format</span><span class=\"p\">.</span><span class=\"nf\">json</span> <span class=\"p\">{</span> <span class=\"n\">render</span> <span class=\"ss\">json: </span><span class=\"vi\">@widget</span> <span class=\"p\">}</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></td></tr></tbody></table></code></pre></figure>\n\n<h2 id=\"gfm-code-blocks-fenced_code_blocks\">GFM Code Blocks (<code class=\"language-plaintext highlighter-rouge\">fenced_code_blocks</code>)</h2>\n\n<div class=\"language-css highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"c\">/* Background color function */</span>\n<span class=\"nc\">.code-bg</span> <span class=\"o\">(</span><span class=\"k\">@v</span><span class=\"p\">)</span> <span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">lightness</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"err\">&gt;=</span> <span class=\"m\">50%</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@return-bg</span><span class=\"p\">:</span> <span class=\"nb\">mix</span><span class=\"p\">(</span><span class=\"m\">#000</span><span class=\"p\">,</span> <span class=\"n\">lighten</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"m\">30%</span><span class=\"p\">),</span> <span class=\"m\">10%</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n<span class=\"nc\">.code-bg</span> <span class=\"o\">(</span><span class=\"k\">@v</span><span class=\"p\">)</span> <span class=\"n\">when</span> <span class=\"p\">(</span><span class=\"n\">lightness</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"err\">&lt;</span> <span class=\"m\">50%</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">@return-bg</span><span class=\"p\">:</span> <span class=\"nb\">mix</span><span class=\"p\">(</span><span class=\"m\">#fff</span><span class=\"p\">,</span> <span class=\"n\">darken</span><span class=\"p\">(</span><span class=\"err\">@</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"m\">10%</span><span class=\"p\">),</span> <span class=\"m\">70%</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div></div>\n\n<h3 id=\"smartypants\">SmartyPants</h3>\n\n<p>“Aha! What’s up, man?” – Jony said.</p>\n\n<h2 id=\"tables\">Tables</h2>\n\n<table>\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Upvotes</th>\n      <th>Downvotes</th>\n      <th>Abstentions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Alice</td>\n      <td>10</td>\n      <td>11</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <td>Bob</td>\n      <td>4</td>\n      <td>3</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>Charlie</td>\n      <td>7</td>\n      <td>9</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <td>Totals</td>\n      <td>21</td>\n      <td>23</td>\n      <td>7</td>\n    </tr>\n  </tbody>\n</table>\n\n<h2 id=\"intra-emphasis\">Intra-emphasis</h2>\n\n<p>foo_bar_baz</p>\n\n<h2 id=\"auto-link\">Auto-link</h2>\n\n<p>https://sparanoid.com/</p>\n\n<h2 id=\"strikethroughs\">Strikethroughs</h2>\n\n<p>This is <del>good</del> bad.</p>\n\n<h2 id=\"space-after-headers\">Space after Headers</h2>\n\n<p>###This is not a header.</p>\n\n<h2 id=\"superscripts\">Superscripts</h2>\n\n<p>This is the 2^(nd) time.</p>\n\n<h2 id=\"footnotes\">Footnotes</h2>\n\n<p>This<sup id=\"fnref:1\" role=\"doc-noteref\"><a href=\"#fn:1\" class=\"footnote\" rel=\"footnote\">1</a></sup> is<sup id=\"fnref:2\" role=\"doc-noteref\"><a href=\"#fn:2\" class=\"footnote\" rel=\"footnote\">2</a></sup> a sentence<sup id=\"fnref:3\" role=\"doc-noteref\"><a href=\"#fn:3\" class=\"footnote\" rel=\"footnote\">3</a></sup>.</p>\n\n<h2 id=\"id-日本語タイトル\">ID 日本語タイトル</h2>\n\n<p>Expected id should be <code class=\"language-plaintext highlighter-rouge\">id-ri-ben-yu-taitoru</code>.</p>\n\n<h2 id=\"id-中文標題\">ID 中文標題</h2>\n\n<p>Expected id should be <code class=\"language-plaintext highlighter-rouge\">id-zhong-wen-biao-ti</code>.</p>\n\n<div class=\"footnotes\" role=\"doc-endnotes\">\n  <ol>\n    <li id=\"fn:1\" role=\"doc-endnote\">\n      <p>Lorem lean startup ipsum <strong>product market fit customer development</strong> acquihire technical cofounder. User engagement A/B testing shrink a market venture capital pitch deck. Social bookmarking group buying <a href=\"#\">crowded market</a> pivot onboarding freemium prototype ping pong. Early stage disruptive ecosystem community outreach dynamic location based strategic investor. <a href=\"#fnref:1\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n    <li id=\"fn:2\" role=\"doc-endnote\">\n      <p><a href=\"https://web.archive.org/web/20160425094356/http://blog.readability.com:80/2012/06/announcement/\">An Important Announcement</a> by Richard Ziade at Readability <a href=\"#fnref:2\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n    <li id=\"fn:3\" role=\"doc-endnote\">\n      <p>Good afterble constanoon, this sweet hongi is as bung as a stuffed morepork. Mean while, in the marae, Dr Ropata and Hairy Maclary from Donaldson’s Dairy were up to no good with a bunch of bloody troties. <a href=\"#fnref:3\" class=\"reversefootnote\" role=\"doc-backlink\">&#8617;&#xfe0e;</a></p>\n    </li>\n  </ol>\n</div>",
      "excerpt": "Indented Code Blocks",
      "languages": null,
      "categories": ["note"],
      "tags": ["miscellaneous"]
    }
    
  

  
    ,
    {
      "title": "Markup Example",
      "permalink": "http://0.0.0.0:4321/markup-example.html",
      "link": "http://0.0.0.0:4321/markup-example.html",
      "date": "2014-06-05T00:00:00-07:00",
      
        "modified": "2018-08-23T23:51:53-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>Lorem lean startup ipsum <strong>product market fit customer development</strong> acquihire technical cofounder. User engagement A/B testing shrink a market venture capital pitch deck. Social bookmarking group buying <a href=\"#\">crowded market</a> pivot onboarding freemium prototype ping pong. Early stage disruptive ecosystem community outreach dynamic location based strategic investor.</p>\n\n<blockquote>\n  <p>Two days ago the Chinese website <a href=\"https://www.taobao.com/\">Taobao</a> held a discount promotion to celebrate what’s known as “double sticks day” in China. In a single 24hr period, they conducted 19bn RMB (US$3.06bn) of business.</p>\n  <footer>\n    <cite><a href=\"https://web.archive.org/web/20150223182728/http://westiseast.co.uk:80/blog/taobao-sales-19-billion-bonanza/\">Chris West</a></cite>\n  </footer>\n</blockquote>\n\n<blockquote>\n  <p>Curabitur blandit tempus porttitor. Nullam quis risus eget urna mollis ornare vel eu leo. Nullam id dolor id nibh ultricies vehicula ut id elit.</p>\n</blockquote>\n\n<p>Good afterble constanoon, this sweet hongi is as bung as a stuffed morepork. Mean while, in the marae, Dr Ropata and Hairy Maclary from Donaldson’s Dairy were up to no good with a bunch of bloody troties.</p>\n\n<h2 id=\"inline-html-elements\">Inline HTML elements</h2>\n\n<p>HTML defines a long list of available inline tags, a complete list of which can be found on the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element\">Mozilla Developer Network</a>.</p>\n\n<ul>\n  <li><strong>To bold text</strong>, use <code class=\"language-plaintext highlighter-rouge\">&lt;strong&gt;</code>.</li>\n  <li><em>To italicize text</em>, use <code class=\"language-plaintext highlighter-rouge\">&lt;em&gt;</code>.</li>\n  <li>Abbreviations, like <abbr title=\"HyperText Markup Langage\">HTML</abbr> should use <code class=\"language-plaintext highlighter-rouge\">&lt;abbr&gt;</code>, with an optional <code class=\"language-plaintext highlighter-rouge\">title</code> attribute for the full phrase.</li>\n  <li>Citations, like <cite>— Tunghsiao Liu &amp; Mark otto</cite>, should use <code class=\"language-plaintext highlighter-rouge\">&lt;cite&gt;</code>.</li>\n  <li><del>Deleted</del> text should use <code class=\"language-plaintext highlighter-rouge\">&lt;del&gt;</code> and <ins>inserted</ins> text should use <code class=\"language-plaintext highlighter-rouge\">&lt;ins&gt;</code>.</li>\n  <li>Superscript <sup>text</sup> uses <code class=\"language-plaintext highlighter-rouge\">&lt;sup&gt;</code> and subscript <sub>text</sub> uses <code class=\"language-plaintext highlighter-rouge\">&lt;sub&gt;</code>.</li>\n</ul>\n\n<hr />\n\n<ul>\n  <li>With the exception of Nietzsche, no other madman has contributed so much to human sanity as has Louis Althusser. He is mentioned twice in the Encyclopaedia Britannica as someone’s teacher. There could be no greater lapse: for two important decades (the 60s and the 70s), Althusser was at the eye of all the important cultural storms. He fathered quite a few of them.</li>\n  <li>This newly-found obscurity forces me to summarize his work before suggesting a few (minor) modifications to it.\n    <ul>\n      <li>Society consists of practices: economic, political and ideological.\n        <ul>\n          <li>Althusser defines a practice as:</li>\n          <li>“Any process of transformation of a determinate product, affected by a determinate human labour, using determinate means (of production)”\n            <ul>\n              <li>The economic practice (the historically specific mode of production) transforms raw materials to finished products using human labour and other means of production, all organized within defined webs of inter-relations. The political practice does the same with social relations as the raw materials. Finally, ideology is the transformation of the way that a subject relates to his real life conditions of existence.\n                <ul>\n                  <li>This is a rejection of the mechanistic worldview (replete with bases and superstructures). It is a rejection of the Marxist theorization of ideology. It is a rejection of the Hegelian fascist “social totality”. It is a dynamic, revealing, modern day model.</li>\n                  <li>“The objective internal reference … the system of questions commanding the answers given”</li>\n                </ul>\n              </li>\n              <li>Subjects to what? The answer: to the material practices of the ideology. This (the creation of subjects) is done by the acts of “hailing” or “interpellation”. These are acts of attracting attention (hailing) , forcing the individuals to generate meaning (interpretation) and making them participate in the practice.\n                <ul>\n                  <li>Subjects to what? The answer: to the material practices of the ideology. This (the creation of subjects) is done by the acts of “hailing” or “interpellation”. These are acts of attracting attention (hailing) , forcing the individuals to generate meaning (interpretation) and making them participate in the practice.</li>\n                  <li>What happens in a pluralistic environment rich in competing ideologies?\n                    <ul>\n                      <li>Clarifying the HOW, though, does not shed light on the WHY.\n                        <ul>\n                          <li>is the fact that in the new one, the second text is articulated with the lapses in the first text … (Marx measures) the problematic contained</li>\n                        </ul>\n                      </li>\n                    </ul>\n                  </li>\n                </ul>\n              </li>\n              <li>Ideology is a practice with lived and material dimensions. It has costumes, rituals, behaviour patterns, ways of thinking. The State employs Ideological Apparatuses (ISAs) to reproduce ideology through practices and productions: (organized) religion, the education system, the family, (organized) politics, the media, the industries of culture.</li>\n            </ul>\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </li>\n  <li>These theoretical tools were widely used to analyze the Advertising and the film industries.</li>\n</ul>\n\n<ol>\n  <li>Ordered list</li>\n  <li>Ordered list\n    <ol>\n      <li>Ordered list\n        <ol>\n          <li>Ordered list</li>\n          <li>Ordered list\n            <ol>\n              <li>Ordered list\n                <ol>\n                  <li>Ordered list</li>\n                  <li>Ordered list</li>\n                </ol>\n              </li>\n              <li>Ordered list\n                <ol>\n                  <li>Ordered list</li>\n                </ol>\n              </li>\n              <li>Ordered list</li>\n            </ol>\n          </li>\n        </ol>\n      </li>\n      <li>Ordered list\n        <ol>\n          <li>Ordered list</li>\n          <li>Ordered list</li>\n        </ol>\n      </li>\n    </ol>\n  </li>\n  <li>Ordered list</li>\n</ol>\n\n<hr />\n\n<h2 id=\"this-should-be-replaced\">“This should be replaced.”</h2>\n\n<p>“This should be replaced.”</p>\n\n<p>This is a normal paragraph.</p>\n\n<h2 id=\"this-should-be-replaced-1\">‘This should be replaced.’</h2>\n\n<p>‘This should be replaced.’</p>\n\n<p>This is a normal paragraph.</p>\n\n<h2 id=\"this-should-be-replaced-2\">「This should be replaced.」</h2>\n\n<p>「This should be replaced.」</p>\n\n<p>This is a normal paragraph.</p>\n\n<h2 id=\"this-should-be-replaced-3\">『This should be replaced.』</h2>\n\n<p>『This should be replaced.』</p>\n\n<p>This is a normal paragraph.</p>\n\n<h2 id=\"this-should-be-replaced-4\">（This should be replaced.）</h2>\n\n<p>（This should be replaced.）</p>\n\n<p>This is a normal paragraph.</p>\n\n<hr />\n\n<p>Most of these elements are styled by browsers with few modifications on our part.</p>\n\n<p>Maui and his rough as guts piece of pounamu, what a stink buzz. Bro, quater-acre patches are really naff good with bung mates, aye. You have no idea how beached as our random kais were aye. Every time I see those beautiful lengths of number 8 wire it’s like Castle Hill all over again aye, do you happen to have a bucket or a hose bro?</p>\n\n<h2 id=\"h2-headings\">H2 Headings</h2>\n\n<p>You have no idea how pretty suss our same same but different toasted sandwiches were aye. Every time I see those carked it keas it’s like the dairy all over again aye, you don’t know his story, bro. Anyway, Hairy Maclary from Donaldson’s Dairy is just Mrs Falani in disguise, to find the true meaning of life, one must start frying up with the hangi, mate. After the rugby ball is jumped the ditch, you add all the stink girl guide biscuits to the trotie you’ve got yourself a meal.</p>\n\n<h3 id=\"h3-headings\">H3 Headings</h3>\n\n<p>You have no idea how pretty suss our same same but different toasted sandwiches were aye. Every time I see those carked it keas it’s like the dairy all over again aye, you don’t know his story, bro. Anyway, Hairy Maclary from Donaldson’s Dairy is just Mrs Falani in disguise, to find the true meaning of life, one must start frying up with the hangi, mate. After the rugby ball is jumped the ditch, you add all the stink girl guide biscuits to the trotie you’ve got yourself a meal.</p>\n\n<h4 id=\"h4-headings\">H4 Headings</h4>\n\n<p>You have no idea how pretty suss our same same but different toasted sandwiches were aye. Every time I see those carked it keas it’s like the dairy all over again aye, you don’t know his story, bro. Anyway, Hairy Maclary from Donaldson’s Dairy is just Mrs Falani in disguise, to find the true meaning of life, one must start frying up with the hangi, mate. After the rugby ball is jumped the ditch, you add all the stink girl guide biscuits to the trotie you’ve got yourself a meal.</p>\n\n<h5 id=\"h5-headings\">H5 Headings</h5>\n\n<p>You have no idea how pretty suss our same same but different toasted sandwiches were aye. Every time I see those carked it keas it’s like the dairy all over again aye, you don’t know his story, bro. Anyway, Hairy Maclary from Donaldson’s Dairy is just Mrs Falani in disguise, to find the true meaning of life, one must start frying up with the hangi, mate. After the rugby ball is jumped the ditch, you add all the stink girl guide biscuits to the trotie you’ve got yourself a meal.</p>\n\n<h6 id=\"h6-headings\">H6 Headings</h6>\n\n<p>You have no idea how pretty suss our same same but different toasted sandwiches were aye. Every time I see those carked it keas it’s like the dairy all over again aye, you don’t know his story, bro. Anyway, Hairy Maclary from Donaldson’s Dairy is just Mrs Falani in disguise, to find the true meaning of life, one must start frying up with the hangi, mate. After the rugby ball is jumped the ditch, you add all the stink girl guide biscuits to the trotie you’ve got yourself a meal.</p>\n\n<hr />\n\n<p>He was alone then; when he sat in that same chair his wife now sits in, and I shared with him the positive result to his HIV test. Though he seemed disinterested, vaguely detached, he had obviously heard of HIV before. His chart from the local clinic indicated a previous history of and treatment for anal gonorrhea, two acute cases of syphilis in the past three years, and a urinary tract infection last month. His only listed sexual contact, his wife. Who, strangely enough, only tested positive for one of the syphilis infections.</p>\n\n<p>“Mistake, this! I am married, not a giver of ass.”</p>\n\n<p>Giver of ass? That’s one for the archive, I think.</p>\n\n<p>Unwilling to engage his obvious denials, I ignore the comment and instead explain that due to a higher than acceptable potential of a false positive result, we won’t consider his oral test as confirmatory until the more accurate blood analysis is in.</p>\n\n<p>“I no understand”, he says to the room in general.</p>\n\n<p>His annoyance is obvious. Abrasively, he offers me his exposed forearm. This, I assume, is my cue to draw his blood. Ignoring the indignant anger beginning to rise, I tighten my jaw, then swab the fat vein with betadine, working the cool, brown liquid off in concentric circles, using strong medicinal smelling alcohol. I use the betadine, as most of these men work in the mines, and dirt three layers thick on exposed skin is the norm. As the first tube in the vacationer fills with blood, he asks,</p>\n\n<p>“So how I get this thing?”</p>\n\n<p>Ah, I see we are going to play the circuitous dance of ignorance. Sounding just a little too clinical, I begin the HIV 101 mantra.</p>\n\n<p>“Well, people acquire HIV through certain types of sex with an infected person, through sharing needles with an infected person, and sometimes through a blood transfusion. Have you ever had a blood transfusion, sir?”</p>\n\n<p>I take the dismissive wave of his hand as a no to the transfusion question. I don’t make a great attempt to navigate a comfort zone here; instinct and experience telling me he has already set the script of what is to follow.</p>\n\n<p>“She is fucking other cocks my whore devil wife”?\nBingo! A narrative that over the next six weeks I will hear from several other men as well.</p>\n\n<p>“These whores, all they want is the cock!”\nCareful Skippy, you really aren’t as convincing as you think you are.</p>\n\n<blockquote>\n  <p>\n    “She is fucking other cocks my whore devil wife”?\n    <br />\n    Bingo! A narrative that over the next six weeks I will hear from several other men as well.\n  </p>\n\n  <p>\n    “These whores, all they want is the cock!”\n    <br />\n    Careful Skippy, you really aren’t as convincing as you think you are.\n  </p>\n\n  <footer>\n    <cite>from <a href=\"https://medium.com/absurdist/a-world-away-c2b692bd808e\">A World Away</a> by alto</cite>\n  </footer>\n</blockquote>\n\n<details>\n  <summary>Supported Fonts</summary>\n  <ul>\n    <li><a href=\"https://www.microsoft.com/typography/otspec/features_fj.htm#qwid\">Microsoft Registered features - qwid</a></li>\n    <li><a href=\"https://typekit.com/fonts/kozuka-mincho-pr6n\">Kozuka Mincho Pr6n</a></li>\n  </ul>\n</details>\n\n<h2 id=\"chinese-paragraph\">Chinese Paragraph</h2>\n\n<p lang=\"zh-cn\">「名词成灾」的流行病里，灾情最严重的该是所谓「科学至上」（scientism）。在现代的工业社会里，科学早成显贵，科技更是骄子，所以知识分子的口头与笔下，有意无意，总爱用一些「学术化」的抽象名词，好显得客观而精确。有人称之为「伪术语」（pseudo-jargon）。例如：明明是 first step，却要说成 initial phase：明明是 letter，却要说成 communication，都属此类。</p>\n\n<h2 id=\"japanese-paragraph\">Japanese Paragraph</h2>\n\n<p lang=\"ja\">『雪国』の主な舞台は、上越国境の清水トンネルを抜けた湯沢温泉であるが、この作品も『伊豆の踊子』同様に、川端康成の旅の出会いから生まれたもので、雪中の火事も実際に起ったことだと川端は語っている。川端は作品内で故意に地名を隠しているが、1934 年（昭和 9 年）6 月 13 日より 1937 年まで新潟県湯沢町の高半旅館（現：高半ホテル）に逗留していたことを随筆『「雪国」の旅』で述べている。</p>\n\n<div class=\"language-markdown highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"gu\">## H2 Heading</span>\n<span class=\"gu\">### H3 Heading</span>\n<span class=\"gu\">#### H4 Heading</span>\n<span class=\"gu\">##### H5 Heading</span>\n<span class=\"gu\">###### H6 Heading</span>\n</code></pre></div></div>\n\n<h2 id=\"newsletters-signup-form\">Newsletters Signup Form</h2>\n\n<form action=\"//sparanoid.us2.list-manage.com/subscribe/post?u=eef500b1fe3fe595f03a27605&amp;id=7bbabe95a9\" method=\"post\">\n  <input name=\"cm-uykhir-uykhir\" type=\"email\" placeholder=\"Your Email\" required=\"\" />\n</form>",
      "excerpt": "Lorem lean startup ipsum product market fit customer development acquihire technical cofounder. User engagement A/B testing shrink a market venture capital pitch deck. Social bookmarking group buying crowded market pivot onboarding freemium prototype ping pong. Early stage disruptive ecosystem community outreach dynamic location based strategic investor.",
      "languages": null,
      "categories": ["note"],
      "tags": ["miscellaneous"]
    }
    
  

  
    ,
    {
      "title": "Custom HTML Markups",
      "permalink": "http://0.0.0.0:4321/custom-html-markups.html",
      "link": "http://0.0.0.0:4321/custom-html-markups.html",
      "date": "2014-06-01T00:00:00-07:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<h2 id=\"note-store-and-download\"><code class=\"language-plaintext highlighter-rouge\">.note</code>, <code class=\"language-plaintext highlighter-rouge\">.store</code>, and <code class=\"language-plaintext highlighter-rouge\">.download</code></h2>\n\n<p>A paragraph block with a thin border line.</p>\n\n<h3 id=\"usage\">Usage</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"nv\">Download</span><span class=\"p\">](</span><span class=\"sx\">download</span><span class=\"p\">)</span> it from GitHub\n{: .download}\n\nLove this plugin? please consider <span class=\"p\">[</span><span class=\"nv\">buying me a cup of coffee</span><span class=\"p\">](</span><span class=\"sx\">donate</span><span class=\"p\">)</span>.\n{: .store}\n</code></pre></div></div>\n\n<h3 id=\"example\">Example</h3>\n\n<p class=\"download\"><a href=\"https://github.com/sparanoid/sparanoid.com/\">Download</a> it from GitHub</p>\n\n<p class=\"store\">Love this plugin? please consider buying me a cup of coffee.</p>\n\n<h2 id=\"largetype\"><code class=\"language-plaintext highlighter-rouge\">.largetype</code></h2>\n\n<p>Make normal paragraph text large enough.</p>\n\n<h3 id=\"usage-1\">Usage</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">[</span><span class=\"nv\">PayPal</span><span class=\"p\">](</span><span class=\"sx\">donate</span><span class=\"p\">)</span>\n{: .largetype}\n</code></pre></div></div>\n\n<h3 id=\"example-1\">Example</h3>\n\n<p class=\"largetype\"><a href=\"https://sparanoid.com/donate/\">PayPal</a></p>\n\n<h2 id=\"browser\"><code class=\"language-plaintext highlighter-rouge\">.browser</code></h2>\n\n<p>A simple browser frame using pure CSS.</p>\n\n<h3 id=\"usage-2\">Usage</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>\n{: .browser}\n</code></pre></div></div>\n\n<h3 id=\"example-2\">Example</h3>\n\n<p class=\"browser\"><img src=\"https://s3.amazonaws.com/sparanoid/delicious.com.png\" alt=\"Delicious Preview\" class=\"no-lightense\" /></p>\n\n<h2 id=\"lightense-images\"><a href=\"https://sparanoid.com/work/lightense-images/\">Lightense Images</a></h2>\n\n<p>A simple library inspired by <a href=\"https://github.com/tholman\">Tim Holman</a> to view large images up close using simple mouse interaction, and the full screen.</p>\n\n<h3 id=\"usage-3\">Usage</h3>\n\n<p>Add the following setting to your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>plugin: lightense\n</code></pre></div></div>\n\n<p>Markdown markup:</p>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/photo.jpg</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p>Lightense Images is activated globally by default, if you want to disable this effect for specific image, you can simply apply <code class=\"language-plaintext highlighter-rouge\">.no-lightense</code> CSS class to your image or <code class=\"language-plaintext highlighter-rouge\">&lt;img&gt;</code>:</p>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .no-lightense}\n</code></pre></div></div>\n\n<p>Please note that if you’re using HTML markup, you should wrap your images into a <code class=\"language-plaintext highlighter-rouge\">&lt;p&gt;</code> container.</p>\n\n<h3 id=\"example-3\">Example</h3>\n\n<p><img src=\"https://s3.amazonaws.com/sparanoid/moonstruck-princess-ext-red.jpg\" alt=\"Moonstruck Princess Extended - Red\" /></p>\n\n<h2 id=\"image-sizes\">Image Sizes</h2>\n\n<p>There’re different size helpers for images. They’re available using the following CSS classes:</p>\n\n<h3 id=\"small-size\">Small Size</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .size-small}\n</code></pre></div></div>\n\n<p><img src=\"https://s3.amazonaws.com/sparanoid/moonstruck-princess-ext-orange.jpg\" alt=\"Moonstruck Princess Extended - orange\" class=\"size-small\" /></p>\n\n<h3 id=\"medium-size\">Medium Size</h3>\n\n<p>The medium size is the default size of images, so you don’t need additional CSS classes for it.</p>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>\n</code></pre></div></div>\n\n<p><img src=\"https://s3.amazonaws.com/sparanoid/moonstruck-princess-ext-yellow.jpg\" alt=\"Moonstruck Princess Extended - Yellow\" /></p>\n\n<h3 id=\"large-size\">Large Size</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .size-large}\n</code></pre></div></div>\n\n<p><img src=\"https://s3.amazonaws.com/sparanoid/moonstruck-princess-ext-green.jpg\" alt=\"Moonstruck Princess Extended - Green\" class=\"size-large\" /></p>\n\n<h3 id=\"aligned-images\">Aligned Images</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .size-left}\n\n<span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .size-right}\n</code></pre></div></div>\n\n<p><img src=\"https://s3.amazonaws.com/sparanoid/moonstruck-princess-ext-blue.jpg\" alt=\"Moonstruck Princess Extended - Blue\" class=\"size-left\" /></p>\n\n<p>Aligned images are smaller images beside the text, you can just apply <code class=\"language-plaintext highlighter-rouge\">.size-left</code> or <code class=\"language-plaintext highlighter-rouge\">.size-right</code> to your images and nothing special markup required. However, that aligned images will be responded to normal large size for small desktops or mobile devices.</p>\n\n<h3 id=\"small-images\">Small Images</h3>\n\n<p>Useful for images smaller than container width.</p>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .no-resize}\n</code></pre></div></div>\n\n<p><img src=\"https://s3.amazonaws.com/sparanoid/who-can-run.png\" alt=\"Run?\" class=\"no-resize\" /></p>\n\n<h3 id=\"small-images-center\">Small Images (center)</h3>\n\n<div class=\"language-md highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"p\">![</span><span class=\"nv\">Image</span><span class=\"p\">](</span><span class=\"sx\">https://sparanoid.com/logo.png</span><span class=\"p\">)</span>{: .no-resize.center}\n</code></pre></div></div>\n\n<p><img src=\"https://s3.amazonaws.com/sparanoid/who-can-run.png\" alt=\"Run?\" class=\"no-resize center\" /></p>",
      "excerpt": ".note, .store, and .download",
      "languages": null,
      "categories": ["note"],
      "tags": ["curtana"]
    }
    
  

  
    ,
    {
      "title": "Custom Color Scheme",
      "permalink": "http://0.0.0.0:4321/custom-color-scheme.html",
      "link": "http://0.0.0.0:4321/custom-color-scheme.html",
      "date": "2014-05-01T00:00:00-07:00",
      
        "modified": "2018-08-10T07:04:53-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>This is an example how to change your post color scheme for specific posts. You can simply add the following variables to your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>scheme-text: \"#0029ff\"\nscheme-link: \"#ff00b4\"\nscheme-hover: \"#ff00b4\"\nscheme-code: \"#ad00ff\"\nscheme-bg: \"#00ebff\"\nscheme-hero-text: \"#00ebff\"\nscheme-hero-link: \"#00ebff\"\nscheme-hero-bg: \"#0029ff\"\n</code></pre></div></div>\n\n<p>You can also ignore other variables if you only want to change the background:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>scheme-bg: \"#00ebff\"\n</code></pre></div></div>",
      "excerpt": "This is an example how to change your post color scheme for specific posts. You can simply add the following variables to your post front-matter field:",
      "languages": null,
      "categories": ["note"],
      "tags": ["curtana"]
    }
    
  

  
    ,
    {
      "title": "Unique Post Styling via Custom CSS",
      "permalink": "http://0.0.0.0:4321/custom-css.html",
      "link": "http://0.0.0.0:4321/custom-css.html",
      "date": "2014-04-01T00:00:00-07:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>This is an example how to change your post styling via CSS. You can simply add the <code class=\"language-plaintext highlighter-rouge\">css</code> option to your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>scheme-text: \"#000\"\nscheme-link: \"#a73300\"\nscheme-hover: \"#ff4e00\"\nscheme-code: \"#a73300\"\ncss: |\n  body {\n    background-image: linear-gradient(to bottom, #fff500, #ff8f00);\n  }\n</code></pre></div></div>\n\n<p>Please note that syntax highlighting may look ugly with the custom background color.</p>",
      "excerpt": "This is an example how to change your post styling via CSS. You can simply add the css option to your post front-matter field:",
      "languages": null,
      "categories": ["note"],
      "tags": ["curtana"]
    }
    
  

  

  
    ,
    {
      "title": "External Link Post",
      "permalink": "http://0.0.0.0:4321/external-link-post.html",
      "link": "http://0.0.0.0:4321/external-link-post.html",
      "date": "2014-02-01T00:00:00-08:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>This is an example of a Tumblr-like external link post. You can simply add the following setting to your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">link</span><span class=\"pi\">:</span> <span class=\"s\">https://sparanoid.com/</span>\n</code></pre></div></div>",
      "excerpt": "This is an example of a Tumblr-like external link post. You can simply add the following setting to your post front-matter field:",
      "languages": null,
      "categories": ["note"],
      "tags": ["curtana"]
    }
    
  

  
    ,
    {
      "title": "Custom Heading Image",
      "permalink": "http://0.0.0.0:4321/custom-heading-image.html",
      "link": "http://0.0.0.0:4321/custom-heading-image.html",
      "date": "2014-02-01T00:00:00-08:00",
      
        "modified": "2018-08-10T07:04:53-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>This is an example of custom post heading image. You can simply add the following setting to your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">heading-img</span><span class=\"pi\">:</span> <span class=\"s\">svg/heading-image.svg</span>\n<span class=\"na\">heading-img-local</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n<span class=\"na\">heading-img-width</span><span class=\"pi\">:</span> <span class=\"m\">400</span>\n</code></pre></div></div>\n\n<blockquote>\n  <p>In Almace Scaffolding v1.1.0, the original <code class=\"language-plaintext highlighter-rouge\">svg-headline*</code>, and <code class=\"language-plaintext highlighter-rouge\">img-headline*</code> options are deprecated.</p>\n</blockquote>\n\n<dl>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-img</code></dt>\n  <dd>Heading image filename, if a relative URL (non-external URL) is provided, the file will be prefixed with <code class=\"language-plaintext highlighter-rouge\">site.file</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-img-local</code></dt>\n  <dd>To avoid relative URL prefixed by <code class=\"language-plaintext highlighter-rouge\">site.file</code>, you can set this option to <code class=\"language-plaintext highlighter-rouge\">true</code> to prefix it with <code class=\"language-plaintext highlighter-rouge\">amsf_user_assets</code>, then you can store your images in <code class=\"language-plaintext highlighter-rouge\">_app/assets/</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-img-width</code></dt>\n  <dd>Set the width of your heading image. The value will be converted to viewport unit automatically. ie. <code class=\"language-plaintext highlighter-rouge\">heading-img-width: 400</code> will be converted to <code class=\"language-plaintext highlighter-rouge\">width: 40vw</code>;</dd>\n</dl>\n\n<blockquote>\n  <p><strong>Pro Tips</strong>: Keep a <code class=\"language-plaintext highlighter-rouge\">&lt;title&gt;</code> tag for your SVG can help Safari generate correct post title for its Reader mode:</p>\n</blockquote>\n\n<div class=\"language-html highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"nt\">&lt;svg</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.w3.org/2000/svg\"</span><span class=\"nt\">&gt;</span>\n<span class=\"nt\">&lt;title&gt;</span>Cool Article<span class=\"nt\">&lt;/title&gt;</span>\n…\n</code></pre></div></div>",
      "excerpt": "This is an example of custom post heading image. You can simply add the following setting to your post front-matter field:",
      "languages": null,
      "categories": ["note"],
      "tags": ["curtana"]
    }
    
  

  
    ,
    {
      "title": "Custom Heading Background",
      "permalink": "http://0.0.0.0:4321/custom-heading-background.html",
      "link": "http://0.0.0.0:4321/custom-heading-background.html",
      "date": "2014-02-01T00:00:00-08:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<p>This is an example of custom heading background. You can simply add the following setting to your post <a href=\"https://jekyllrb.com/docs/frontmatter/\">front-matter field</a>:</p>\n\n<div class=\"language-yaml highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code><span class=\"na\">heading-bg</span><span class=\"pi\">:</span> <span class=\"s\">img/heading-background.jpg</span>\n<span class=\"na\">heading-bg-local</span><span class=\"pi\">:</span> <span class=\"no\">true</span>\n<span class=\"na\">heading-bg-color</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">#8141b1\"</span>\n<span class=\"na\">heading-bg-size</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">100px</span><span class=\"nv\"> </span><span class=\"s\">100px\"</span>\n<span class=\"na\">heading-bg-position</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">center</span><span class=\"nv\"> </span><span class=\"s\">bottom\"</span>\n<span class=\"na\">heading-bg-repeat</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">repeat\"</span>\n<span class=\"na\">heading-bg-text</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">#fff\"</span>\n</code></pre></div></div>\n\n<dl>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg</code></dt>\n  <dd>Background image filename, if a relative URL (non-external URL) is provided, the file will be prefixed with <code class=\"language-plaintext highlighter-rouge\">site.file</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg-local</code></dt>\n  <dd>To avoid relative URL prefixed by <code class=\"language-plaintext highlighter-rouge\">site.file</code>, you can set this option to <code class=\"language-plaintext highlighter-rouge\">true</code> to prefix it with <code class=\"language-plaintext highlighter-rouge\">amsf_user_assets</code>, then you can store your images in <code class=\"language-plaintext highlighter-rouge\">_app/assets/</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg-color</code></dt>\n  <dd>Background color, recommend setting its value matches your image color tone.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg-size</code></dt>\n  <dd>Background size, default value is <code class=\"language-plaintext highlighter-rouge\">cover</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg-position</code></dt>\n  <dd>Background position, default value is <code class=\"language-plaintext highlighter-rouge\">center center</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg-repeat</code></dt>\n  <dd>Background repeat, default value is <code class=\"language-plaintext highlighter-rouge\">no-repeat</code>.</dd>\n  <dt><code class=\"language-plaintext highlighter-rouge\">heading-bg-text</code></dt>\n  <dd>Text color of the heading, set it based on your background image.</dd>\n</dl>\n\n<blockquote>\n  <p>Heading image copyright info:\n© 士郎正宗・Production I.G／講談社・「攻殻機動隊」製作委員会</p>\n</blockquote>",
      "excerpt": "This is an example of custom heading background. You can simply add the following setting to your post front-matter field:",
      "languages": null,
      "categories": ["note"],
      "tags": ["curtana"]
    }
    
  

  
    ,
    {
      "title": "GitHub Pages Setup Guide",
      "permalink": "http://0.0.0.0:4321/github-pages-setup.html",
      "link": "http://0.0.0.0:4321/github-pages-setup.html",
      "date": "2014-01-01T00:00:00-08:00",
      
        "modified": "2019-09-03T00:30:46-07:00",
      
      "author": {
        "name": "Tunghsiao Liu",
        "url": "https://sparanoid.com/",
        "email": "t@sparanoid.com"
      },
      "content": "<h2 id=\"the-problem\">The Problem</h2>\n\n<p>In short answer: yes, but additional actions required.</p>\n\n<p>tl;dr: You can serve AMSF as a static site on GitHub Pages, but not a Jekyll site using Jekyll renderer provided by GitHub Pages.</p>\n\n<p>There’re some factors that prevent it from generating pages using GitHub Pages renderer:</p>\n\n<ul>\n  <li>Many features Almace Scaffolding provides like LiveReload, Sass support, inline SVG, and HTML minification are implemented using <a href=\"https://gruntjs.com/\">Grunt.js</a>, it’s not supported by GitHub Pages.</li>\n  <li>Almace Scaffolding uses the latest pre-release Jekyll, so not all features are supported by GitHub Pages renderers.</li>\n  <li>GItHub Pages build server <a href=\"https://help.github.com/articles/pages-don-t-build-unable-to-run-jekyll#source-setting\">overwrites the <code class=\"language-plaintext highlighter-rouge\">source</code> settings</a>. This prevents it from generating pages from current file structure.</li>\n</ul>\n\n<h2 id=\"the-solution-for-users-or-organization-sites\">The Solution for Users or Organization Sites</h2>\n\n<p>Since GitHub Pages for users or organization sites can only be served from the root directory of your master branch. You have to:</p>\n\n<ul>\n  <li>Make sure your <code class=\"language-plaintext highlighter-rouge\">baseurl</code> is set to <code class=\"language-plaintext highlighter-rouge\">\"\"</code> (empty) in your <code class=\"language-plaintext highlighter-rouge\">_config.yml</code>.</li>\n  <li>Build your site locally (<code class=\"language-plaintext highlighter-rouge\">grunt build</code>).</li>\n  <li>Use your own method, create a script, bash, whatever it works to move the generated pages to the root directory of your repository.</li>\n  <li>Upload Jekyll generated static files to your <code class=\"language-plaintext highlighter-rouge\">username.github.io</code> repository.</li>\n</ul>\n\n<p>If you’d like to keep all things under Git control, you can try the following file structure:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>├── _amsf/ (Almace Scaffolding source code)\n├── *.html (Jekyll-generated static pages)\n└── README.md (your own readme)\n</code></pre></div></div>\n\n<p>You can see this <a href=\"https://github.com/amsf/amsf.github.io/\">live demo</a> how it actually works.</p>\n\n<h2 id=\"the-solution-for-project-sites\">The Solution for Project Sites</h2>\n\n<p>Things can be simpler if you need AMSF for your project sites since GitHub Pages supports serve your site from a subdirectory:</p>\n\n<ul>\n  <li>Make the following changes in your <code class=\"language-plaintext highlighter-rouge\">_config.yml</code>:\n    <ul>\n      <li>Change <code class=\"language-plaintext highlighter-rouge\">destination</code> to <code class=\"language-plaintext highlighter-rouge\">docs</code></li>\n      <li>Change <code class=\"language-plaintext highlighter-rouge\">baseurl</code> to the name of your repository slug, ie. <code class=\"language-plaintext highlighter-rouge\">/my-project</code>.</li>\n      <li>Change <code class=\"language-plaintext highlighter-rouge\">flatten_base</code> to <code class=\"language-plaintext highlighter-rouge\">true</code>.</li>\n    </ul>\n  </li>\n  <li>Build your site locally (<code class=\"language-plaintext highlighter-rouge\">grunt build</code>).</li>\n  <li>Push changes to GitHub</li>\n</ul>",
      "excerpt": "The Problem",
      "languages": null,
      "categories": ["note"],
      "tags": ["deployment"]
    }
    
  


]
