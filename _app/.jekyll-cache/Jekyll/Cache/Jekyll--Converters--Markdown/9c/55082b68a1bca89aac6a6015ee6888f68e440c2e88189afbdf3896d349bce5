I"x)<ul id="markdown-toc">
  <li><a href="#requirements" id="markdown-toc-requirements">Requirements</a></li>
  <li><a href="#method-run-in-docker" id="markdown-toc-method-run-in-docker">Method: Run in Docker</a>    <ul>
      <li><a href="#custom-dependencies" id="markdown-toc-custom-dependencies">Custom Dependencies</a></li>
    </ul>
  </li>
  <li><a href="#method-run-locally" id="markdown-toc-method-run-locally">Method: Run Locally</a>    <ul>
      <li><a href="#upgrading" id="markdown-toc-upgrading">Upgrading</a></li>
      <li><a href="#using-beta-release" id="markdown-toc-using-beta-release">Using Beta Release</a></li>
    </ul>
  </li>
  <li><a href="#download" id="markdown-toc-download">Download</a></li>
  <li><a href="#jekyll-migration" id="markdown-toc-jekyll-migration">Jekyll Migration</a></li>
</ul>

<h2 id="requirements">Requirements</h2>

<p>Almace Scaffolding has exactly the same requirements as Jekyll. For more info please refer to <a href="https://jekyllrb.com/docs/installation/">Installation - Jekyll</a>.</p>

<h2 id="method-run-in-docker">Method: Run in Docker</h2>

<p>You can simply run Almace Scaffolding in Docker with <code class="language-plaintext highlighter-rouge">compose</code> command. Create your own <code class="language-plaintext highlighter-rouge">docker-compose.yml</code> file with the following content:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>

<span class="na">x-defaults</span><span class="pi">:</span> <span class="nl">&amp;defaults</span>
  <span class="na">image</span><span class="pi">:</span> <span class="s">sparanoid/almace-scaffolding:latest</span>
  <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
  <span class="na">volumes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">./_app/_posts/:/app/_app/_posts/</span>
  <span class="na">ports</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s2">"</span><span class="s">4321:4321"</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">amsf</span><span class="pi">:</span>
    <span class="na">&lt;&lt;</span><span class="pi">:</span> <span class="nv">*defaults</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">serve</span>
</code></pre></div></div>

<p>This is a minimal docker compose configuration with local <code class="language-plaintext highlighter-rouge">_posts</code> volume mounted inside the container. The <a href="https://docs.docker.com/compose/compose-file/compose-file-v3/#volumes">volumes</a> option can be different based on your customization.</p>

<p>Mount custom data, pages, posts to override them inside container:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
  <span class="na">volumes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">./_app/_data/:/app/_app/_data/</span>
    <span class="pi">-</span> <span class="s">./_app/_pages/:/app/_app/_pages/</span>
    <span class="pi">-</span> <span class="s">./_app/_posts/:/app/_app/_posts/</span>
</code></pre></div></div>

<p>Override config file:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
  <span class="na">volumes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">./_config.yml:/app/_config.yml</span>
</code></pre></div></div>

<p>Use custom Gruntfile:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
  <span class="na">volumes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">./Gruntfile.coffee:/app/Gruntfile.coffee</span>
</code></pre></div></div>

<p>Use custom AMSF config for custom themes and templates:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">...</span>
  <span class="na">volumes</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">./_app/:/app/_app/</span>
    <span class="pi">-</span> <span class="s">./_site/:/app/_site/</span>
    <span class="pi">-</span> <span class="s">./_amsf.yml:/app/_amsf.yml</span>
</code></pre></div></div>

<p>You can see the example repo at <a href="https://github.com/amsf/docker-amsf-example">amsf/docker-amsf-example</a>.</p>

<h3 id="custom-dependencies">Custom Dependencies</h3>

<p>You can load custom dependencies (custom Grunt plugins or Jekyll plugins) in Docker by building your own Docker images. First you need to create a <code class="language-plaintext highlighter-rouge">Dockerfile</code>:</p>

<div class="language-dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">FROM</span><span class="s"> sparanoid/almace-scaffolding:latest</span>

<span class="c"># Copy custom dependencies configs</span>
<span class="k">COPY</span><span class="s"> Gemfile* /app/</span>
<span class="k">COPY</span><span class="s"> package.json /app/package.json</span>
<span class="k">COPY</span><span class="s"> yarn.lock /app/yarn.lock</span>

<span class="c"># Reinstall project specific dependencies</span>
<span class="k">RUN </span>bundle <span class="nb">install</span> <span class="o">&amp;&amp;</span> yarn <span class="nb">install</span>
</code></pre></div></div>

<p>Then build your image with Docker Compose:</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>

<span class="na">x-defaults</span><span class="pi">:</span> <span class="nl">&amp;defaults</span>
  <span class="na">build</span><span class="pi">:</span>
    <span class="na">context</span><span class="pi">:</span> <span class="s">.</span>
    <span class="na">dockerfile</span><span class="pi">:</span> <span class="s">Dockerfile</span>
<span class="nn">...</span>
</code></pre></div></div>

<h2 id="method-run-locally">Method: Run Locally</h2>

<ol>
  <li><a href="https://github.com/sparanoid/almace-scaffolding/fork">Fork</a> or clone the repo.</li>
  <li>Install dependencies with Ruby gem <a href="https://bundler.io/"><code class="language-plaintext highlighter-rouge">bundler</code></a> and Node.js package manager <a href="https://www.npmjs.org/"><code class="language-plaintext highlighter-rouge">npm</code></a>.</li>
  <li>Run <code class="language-plaintext highlighter-rouge">grunt init</code> to initialize your project.</li>
  <li>Run <code class="language-plaintext highlighter-rouge">grunt serve</code> to fire up a local server.</li>
  <li>Edit and customize your site.</li>
  <li>Change Git remote to your own repo.</li>
  <li>Push and deploy.</li>
</ol>

<p>So in short for geeks:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git clone https://github.com/sparanoid/almace-scaffolding my-site
<span class="nv">$ </span><span class="nb">cd </span>my-site
<span class="nv">$ </span>bundle <span class="nb">install</span> <span class="o">&amp;&amp;</span> yarn <span class="nb">install</span>
<span class="nv">$ </span>grunt init
<span class="nv">$ </span>grunt serve
<span class="c"># ...editing</span>
<span class="nv">$ </span>git remote set-url origin https://github.com/sparanoid/my-site.git
<span class="nv">$ </span>git push <span class="nt">-u</span> origin master
<span class="c"># ...publishing</span>
<span class="nv">$ </span>grunt <span class="o">&amp;&amp;</span> grunt deploy:rsync <span class="nt">--env</span><span class="o">=</span>prod
</code></pre></div></div>

<h3 id="upgrading">Upgrading</h3>

<p>It will be easy if you’re a casual blogger and keep every core and template file untouched. You can use the following command to update Almace Scaffolding core files:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grunt amsf-update
</code></pre></div></div>

<p>It checks the latest Almace Scaffolding build from GitHub and updates core files automatically. Please keep in mind that if you changed some of the AMSF core files this action will <strong>override</strong> the changes you made. So it’s recommended to keep your project under version control, you will always be able to compare changes for Almace Scaffolding.</p>

<h3 id="using-beta-release">Using Beta Release</h3>

<p>By default, when you run <code class="language-plaintext highlighter-rouge">amsf-update</code> you will get updated files from <code class="language-plaintext highlighter-rouge">release</code> branch. However, I’m continuously working on Almace Scaffolding, so there may have testing branches you can try and give me feedback if you’re interested. You can check the AMSF GitHub repository for available branches, and it’s very easy to switch:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grunt amsf-update <span class="nt">--branch</span><span class="o">=</span>feat/service-worker
</code></pre></div></div>

<p>The branch <code class="language-plaintext highlighter-rouge">master</code> is the one which is always available to check out and also has the latest changes:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grunt amsf-update <span class="nt">--branch</span><span class="o">=</span>master
</code></pre></div></div>

<p>If you messed up with the testing branch, don’t worry, you can just run a normal update to revert them back:</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>grunt amsf-update
</code></pre></div></div>

<h2 id="download">Download</h2>

<p>Go to the <a href="https://github.com/sparanoid/almace-scaffolding">GitHub repository</a> for downloads, bug reports, and feature requests.</p>

<h2 id="jekyll-migration">Jekyll Migration</h2>

<p>You can simply copy all posts from your old Jekyll setup into <code class="language-plaintext highlighter-rouge">_app/_posts</code>, you can also transfer your custom pages into <code class="language-plaintext highlighter-rouge">_app/_pages/</code>.</p>
:ET